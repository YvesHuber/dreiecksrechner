import * as React from 'react';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var runtime = {exports: {}};

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

(function (module) {
var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
}(runtime));

var _regeneratorRuntime = runtime.exports;

function cov_20wqqco38b() {
  var path = "/home/vinoth/projects/react-sketch-canvas/src/Paths/index.tsx";
  var hash = "80c4a162af9ff11419db7b7c460ec352bdae34fe";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/vinoth/projects/react-sketch-canvas/src/Paths/index.tsx",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 23
        },
        end: {
          line: 13,
          column: 1
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 10,
          column: 5
        }
      },
      "2": {
        start: {
          line: 7,
          column: 25
        },
        end: {
          line: 7,
          column: 33
        }
      },
      "3": {
        start: {
          line: 8,
          column: 23
        },
        end: {
          line: 8,
          column: 38
        }
      },
      "4": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 133
        }
      },
      "5": {
        start: {
          line: 11,
          column: 14
        },
        end: {
          line: 11,
          column: 124
        }
      },
      "6": {
        start: {
          line: 11,
          column: 49
        },
        end: {
          line: 11,
          column: 119
        }
      },
      "7": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 153
        }
      },
      "8": {
        start: {
          line: 14,
          column: 20
        },
        end: {
          line: 21,
          column: 1
        }
      },
      "9": {
        start: {
          line: 15,
          column: 20
        },
        end: {
          line: 15,
          column: 39
        }
      },
      "10": {
        start: {
          line: 16,
          column: 20
        },
        end: {
          line: 16,
          column: 39
        }
      },
      "11": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 20,
          column: 6
        }
      },
      "12": {
        start: {
          line: 22,
          column: 21
        },
        end: {
          line: 33,
          column: 1
        }
      },
      "13": {
        start: {
          line: 23,
          column: 49
        },
        end: {
          line: 23,
          column: 62
        }
      },
      "14": {
        start: {
          line: 24,
          column: 14
        },
        end: {
          line: 24,
          column: 33
        }
      },
      "15": {
        start: {
          line: 25,
          column: 14
        },
        end: {
          line: 25,
          column: 29
        }
      },
      "16": {
        start: {
          line: 26,
          column: 22
        },
        end: {
          line: 26,
          column: 25
        }
      },
      "17": {
        start: {
          line: 27,
          column: 14
        },
        end: {
          line: 27,
          column: 24
        }
      },
      "18": {
        start: {
          line: 28,
          column: 18
        },
        end: {
          line: 28,
          column: 51
        }
      },
      "19": {
        start: {
          line: 29,
          column: 19
        },
        end: {
          line: 29,
          column: 39
        }
      },
      "20": {
        start: {
          line: 30,
          column: 14
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "21": {
        start: {
          line: 31,
          column: 14
        },
        end: {
          line: 31,
          column: 50
        }
      },
      "22": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 32,
          column: 18
        }
      },
      "23": {
        start: {
          line: 34,
          column: 29
        },
        end: {
          line: 64,
          column: 1
        }
      },
      "24": {
        start: {
          line: 35,
          column: 15
        },
        end: {
          line: 35,
          column: 19
        }
      },
      "25": {
        start: {
          line: 36,
          column: 15
        },
        end: {
          line: 36,
          column: 19
        }
      },
      "26": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 56,
          column: 5
        }
      },
      "27": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 41,
          column: 15
        }
      },
      "28": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 18
        }
      },
      "29": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 47,
          column: 15
        }
      },
      "30": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 18
        }
      },
      "31": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 54,
          column: 15
        }
      },
      "32": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 18
        }
      },
      "33": {
        start: {
          line: 57,
          column: 25
        },
        end: {
          line: 62,
          column: 6
        }
      },
      "34": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 63,
          column: 70
        }
      },
      "35": {
        start: {
          line: 65,
          column: 14
        },
        end: {
          line: 65,
          column: 292
        }
      },
      "36": {
        start: {
          line: 65,
          column: 34
        },
        end: {
          line: 65,
          column: 291
        }
      },
      "37": {
        start: {
          line: 65,
          column: 104
        },
        end: {
          line: 65,
          column: 288
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 23
          },
          end: {
            line: 5,
            column: 24
          }
        },
        loc: {
          start: {
            line: 5,
            column: 94
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 11,
            column: 27
          },
          end: {
            line: 11,
            column: 28
          }
        },
        loc: {
          start: {
            line: 11,
            column: 49
          },
          end: {
            line: 11,
            column: 119
          }
        },
        line: 11
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 14,
            column: 20
          },
          end: {
            line: 14,
            column: 21
          }
        },
        loc: {
          start: {
            line: 14,
            column: 40
          },
          end: {
            line: 21,
            column: 1
          }
        },
        line: 14
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 22,
            column: 21
          },
          end: {
            line: 22,
            column: 22
          }
        },
        loc: {
          start: {
            line: 22,
            column: 40
          },
          end: {
            line: 33,
            column: 1
          }
        },
        line: 22
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 34,
            column: 29
          },
          end: {
            line: 34,
            column: 30
          }
        },
        loc: {
          start: {
            line: 34,
            column: 46
          },
          end: {
            line: 64,
            column: 1
          }
        },
        line: 34
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 65,
            column: 14
          },
          end: {
            line: 65,
            column: 15
          }
        },
        loc: {
          start: {
            line: 65,
            column: 34
          },
          end: {
            line: 65,
            column: 291
          }
        },
        line: 65
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 65,
            column: 86
          },
          end: {
            line: 65,
            column: 87
          }
        },
        loc: {
          start: {
            line: 65,
            column: 104
          },
          end: {
            line: 65,
            column: 288
          }
        },
        line: 65
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 5,
            column: 63
          },
          end: {
            line: 5,
            column: 86
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 5,
            column: 73
          },
          end: {
            line: 5,
            column: 86
          }
        }],
        line: 5
      },
      "1": {
        loc: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 6
      },
      "2": {
        loc: {
          start: {
            line: 11,
            column: 49
          },
          end: {
            line: 11,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 11,
            column: 59
          },
          end: {
            line: 11,
            column: 84
          }
        }, {
          start: {
            line: 11,
            column: 87
          },
          end: {
            line: 11,
            column: 119
          }
        }],
        line: 11
      },
      "3": {
        loc: {
          start: {
            line: 24,
            column: 14
          },
          end: {
            line: 24,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 14
          },
          end: {
            line: 24,
            column: 22
          }
        }, {
          start: {
            line: 24,
            column: 26
          },
          end: {
            line: 24,
            column: 33
          }
        }],
        line: 24
      },
      "4": {
        loc: {
          start: {
            line: 25,
            column: 14
          },
          end: {
            line: 25,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 14
          },
          end: {
            line: 25,
            column: 18
          }
        }, {
          start: {
            line: 25,
            column: 22
          },
          end: {
            line: 25,
            column: 29
          }
        }],
        line: 25
      },
      "5": {
        loc: {
          start: {
            line: 28,
            column: 29
          },
          end: {
            line: 28,
            column: 50
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 28,
            column: 39
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: 28,
            column: 49
          },
          end: {
            line: 28,
            column: 50
          }
        }],
        line: 28
      },
      "6": {
        loc: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 42,
            column: 18
          }
        }, {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 48,
            column: 18
          }
        }, {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 55,
            column: 18
          }
        }],
        line: 37
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "80c4a162af9ff11419db7b7c460ec352bdae34fe"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_20wqqco38b = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_20wqqco38b();
/**
 * Generate SVG Path tag from the given points
 */

cov_20wqqco38b().s[0]++;
var SvgPath = function SvgPath(_ref) {
  var paths = _ref.paths,
      id = _ref.id,
      strokeWidth = _ref.strokeWidth,
      strokeColor = _ref.strokeColor,
      _ref$command = _ref.command,
      command = _ref$command === void 0 ? (cov_20wqqco38b().b[0][0]++, bezierCommand) : _ref$command;
  cov_20wqqco38b().f[0]++;
  cov_20wqqco38b().s[1]++;

  if (paths.length === 1) {
    cov_20wqqco38b().b[1][0]++;

    var _ref2 = (cov_20wqqco38b().s[2]++, paths[0]),
        x = _ref2.x,
        y = _ref2.y;

    var radius = (cov_20wqqco38b().s[3]++, strokeWidth / 2);
    cov_20wqqco38b().s[4]++;
    return React.createElement("circle", {
      key: id,
      id: id,
      cx: x,
      cy: y,
      r: radius,
      stroke: strokeColor,
      fill: strokeColor
    });
  } else {
    cov_20wqqco38b().b[1][1]++;
  }

  var d = (cov_20wqqco38b().s[5]++, paths.reduce(function (acc, point, i, a) {
    cov_20wqqco38b().f[1]++;
    cov_20wqqco38b().s[6]++;
    return i === 0 ? (cov_20wqqco38b().b[2][0]++, "M " + point.x + "," + point.y) : (cov_20wqqco38b().b[2][1]++, acc + " " + command(point, i, a));
  }, ''));
  cov_20wqqco38b().s[7]++;
  return React.createElement("path", {
    key: id,
    id: id,
    d: d,
    fill: "none",
    strokeLinecap: "round",
    stroke: strokeColor,
    strokeWidth: strokeWidth
  });
};
cov_20wqqco38b().s[8]++;
var line = function line(pointA, pointB) {
  cov_20wqqco38b().f[2]++;
  var lengthX = (cov_20wqqco38b().s[9]++, pointB.x - pointA.x);
  var lengthY = (cov_20wqqco38b().s[10]++, pointB.y - pointA.y);
  cov_20wqqco38b().s[11]++;
  return {
    length: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),
    angle: Math.atan2(lengthY, lengthX)
  };
};
cov_20wqqco38b().s[12]++;

var controlPoint = function controlPoint(controlPoints) {
  cov_20wqqco38b().f[3]++;

  var _ref3 = (cov_20wqqco38b().s[13]++, controlPoints),
      current = _ref3.current,
      next = _ref3.next,
      previous = _ref3.previous,
      reverse = _ref3.reverse;

  var p = (cov_20wqqco38b().s[14]++, (cov_20wqqco38b().b[3][0]++, previous) || (cov_20wqqco38b().b[3][1]++, current));
  var n = (cov_20wqqco38b().s[15]++, (cov_20wqqco38b().b[4][0]++, next) || (cov_20wqqco38b().b[4][1]++, current));
  var smoothing = (cov_20wqqco38b().s[16]++, 0.2);
  var o = (cov_20wqqco38b().s[17]++, line(p, n));
  var angle = (cov_20wqqco38b().s[18]++, o.angle + (reverse ? (cov_20wqqco38b().b[5][0]++, Math.PI) : (cov_20wqqco38b().b[5][1]++, 0)));
  var length = (cov_20wqqco38b().s[19]++, o.length * smoothing);
  var x = (cov_20wqqco38b().s[20]++, current.x + Math.cos(angle) * length);
  var y = (cov_20wqqco38b().s[21]++, current.y + Math.sin(angle) * length);
  cov_20wqqco38b().s[22]++;
  return [x, y];
};

cov_20wqqco38b().s[23]++;
var bezierCommand = function bezierCommand(point, i, a) {
  cov_20wqqco38b().f[4]++;
  var cpsX = (cov_20wqqco38b().s[24]++, null);
  var cpsY = (cov_20wqqco38b().s[25]++, null);
  cov_20wqqco38b().s[26]++;

  switch (i) {
    case 0:
      cov_20wqqco38b().b[6][0]++;
      cov_20wqqco38b().s[27]++;

      var _controlPoint = controlPoint({
        current: point
      });

      cpsX = _controlPoint[0];
      cpsY = _controlPoint[1];
      cov_20wqqco38b().s[28]++;
      break;

    case 1:
      cov_20wqqco38b().b[6][1]++;
      cov_20wqqco38b().s[29]++;

      var _controlPoint2 = controlPoint({
        current: a[i - 1],
        next: point
      });

      cpsX = _controlPoint2[0];
      cpsY = _controlPoint2[1];
      cov_20wqqco38b().s[30]++;
      break;

    default:
      cov_20wqqco38b().b[6][2]++;
      cov_20wqqco38b().s[31]++;

      var _controlPoint3 = controlPoint({
        current: a[i - 1],
        previous: a[i - 2],
        next: point
      });

      cpsX = _controlPoint3[0];
      cpsY = _controlPoint3[1];
      cov_20wqqco38b().s[32]++;
      break;
  }

  var _ref4 = (cov_20wqqco38b().s[33]++, controlPoint({
    current: point,
    previous: a[i - 1],
    next: a[i + 1],
    reverse: true
  })),
      cpeX = _ref4[0],
      cpeY = _ref4[1];

  cov_20wqqco38b().s[34]++;
  return "C " + cpsX + "," + cpsY + " " + cpeX + "," + cpeY + " " + point.x + ", " + point.y;
};
cov_20wqqco38b().s[35]++;

var Paths = function Paths(_ref5) {
  var id = _ref5.id,
      paths = _ref5.paths;
  cov_20wqqco38b().f[5]++;
  cov_20wqqco38b().s[36]++;
  return React.createElement(React.Fragment, null, paths.map(function (path, index) {
    cov_20wqqco38b().f[6]++;
    cov_20wqqco38b().s[37]++;
    return React.createElement(SvgPath, {
      key: id + "__" + index,
      paths: path.paths,
      id: id + "__" + index,
      strokeWidth: path.strokeWidth,
      strokeColor: path.strokeColor,
      command: bezierCommand
    });
  }));
};

function cov_1z2c2igzc5() {
  var path = "/home/vinoth/projects/react-sketch-canvas/src/Canvas/index.tsx";
  var hash = "317c21a99c8bf0f995546f3a66265470aeb29b9d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/vinoth/projects/react-sketch-canvas/src/Canvas/index.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 14,
          column: 2
        }
      },
      "1": {
        start: {
          line: 3,
          column: 27
        },
        end: {
          line: 14,
          column: 2
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 27
        }
      },
      "3": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "4": {
        start: {
          line: 6,
          column: 8
        },
        end: {
          line: 8,
          column: 9
        }
      },
      "5": {
        start: {
          line: 7,
          column: 12
        },
        end: {
          line: 7,
          column: 25
        }
      },
      "6": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 34
        }
      },
      "7": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 56
        }
      },
      "8": {
        start: {
          line: 11,
          column: 43
        },
        end: {
          line: 11,
          column: 54
        }
      },
      "9": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 18
        }
      },
      "10": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 49
        }
      },
      "11": {
        start: {
          line: 16,
          column: 22
        },
        end: {
          line: 16,
          column: 56
        }
      },
      "12": {
        start: {
          line: 17,
          column: 18
        },
        end: {
          line: 17,
          column: 36
        }
      },
      "13": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 18,
          column: 38
        }
      },
      "14": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 64
        }
      },
      "15": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 54
        }
      },
      "16": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 56
        }
      },
      "17": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 40
        }
      },
      "18": {
        start: {
          line: 24,
          column: 22
        },
        end: {
          line: 189,
          column: 2
        }
      },
      "19": {
        start: {
          line: 28,
          column: 11
        },
        end: {
          line: 28,
          column: 16
        }
      },
      "20": {
        start: {
          line: 29,
          column: 22
        },
        end: {
          line: 29,
          column: 40
        }
      },
      "21": {
        start: {
          line: 31,
          column: 27
        },
        end: {
          line: 43,
          column: 5
        }
      },
      "22": {
        start: {
          line: 32,
          column: 29
        },
        end: {
          line: 32,
          column: 71
        }
      },
      "23": {
        start: {
          line: 33,
          column: 27
        },
        end: {
          line: 33,
          column: 46
        }
      },
      "24": {
        start: {
          line: 34,
          column: 26
        },
        end: {
          line: 34,
          column: 45
        }
      },
      "25": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 37,
          column: 9
        }
      },
      "26": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 34
        }
      },
      "27": {
        start: {
          line: 38,
          column: 22
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "28": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 21
        }
      },
      "29": {
        start: {
          line: 45,
          column: 30
        },
        end: {
          line: 55,
          column: 5
        }
      },
      "30": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 50,
          column: 9
        }
      },
      "31": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 19
        }
      },
      "32": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 52,
          column: 19
        }
      },
      "33": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 19
        }
      },
      "34": {
        start: {
          line: 53,
          column: 22
        },
        end: {
          line: 53,
          column: 43
        }
      },
      "35": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 29
        }
      },
      "36": {
        start: {
          line: 56,
          column: 30
        },
        end: {
          line: 66,
          column: 5
        }
      },
      "37": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 58,
          column: 19
        }
      },
      "38": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 19
        }
      },
      "39": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "40": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 19
        }
      },
      "41": {
        start: {
          line: 64,
          column: 22
        },
        end: {
          line: 64,
          column: 43
        }
      },
      "42": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 29
        }
      },
      "43": {
        start: {
          line: 67,
          column: 28
        },
        end: {
          line: 76,
          column: 5
        }
      },
      "44": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 69,
          column: 19
        }
      },
      "45": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 19
        }
      },
      "46": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "47": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 19
        }
      },
      "48": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 22
        }
      },
      "49": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 144,
          column: 8
        }
      },
      "50": {
        start: {
          line: 78,
          column: 42
        },
        end: {
          line: 144,
          column: 5
        }
      },
      "51": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 119,
          column: 15
        }
      },
      "52": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 118,
          column: 17
        }
      },
      "53": {
        start: {
          line: 82,
          column: 35
        },
        end: {
          line: 82,
          column: 52
        }
      },
      "54": {
        start: {
          line: 83,
          column: 20
        },
        end: {
          line: 85,
          column: 21
        }
      },
      "55": {
        start: {
          line: 84,
          column: 24
        },
        end: {
          line: 84,
          column: 63
        }
      },
      "56": {
        start: {
          line: 86,
          column: 57
        },
        end: {
          line: 86,
          column: 85
        }
      },
      "57": {
        start: {
          line: 87,
          column: 41
        },
        end: {
          line: 87,
          column: 97
        }
      },
      "58": {
        start: {
          line: 88,
          column: 46
        },
        end: {
          line: 88,
          column: 77
        }
      },
      "59": {
        start: {
          line: 89,
          column: 20
        },
        end: {
          line: 97,
          column: 21
        }
      },
      "60": {
        start: {
          line: 90,
          column: 24
        },
        end: {
          line: 96,
          column: 25
        }
      },
      "61": {
        start: {
          line: 91,
          column: 40
        },
        end: {
          line: 91,
          column: 72
        }
      },
      "62": {
        start: {
          line: 92,
          column: 28
        },
        end: {
          line: 92,
          column: 56
        }
      },
      "63": {
        start: {
          line: 95,
          column: 28
        },
        end: {
          line: 95,
          column: 144
        }
      },
      "64": {
        start: {
          line: 98,
          column: 20
        },
        end: {
          line: 114,
          column: 23
        }
      },
      "65": {
        start: {
          line: 100,
          column: 45
        },
        end: {
          line: 100,
          column: 77
        }
      },
      "66": {
        start: {
          line: 101,
          column: 24
        },
        end: {
          line: 101,
          column: 77
        }
      },
      "67": {
        start: {
          line: 102,
          column: 24
        },
        end: {
          line: 102,
          column: 79
        }
      },
      "68": {
        start: {
          line: 103,
          column: 40
        },
        end: {
          line: 103,
          column: 69
        }
      },
      "69": {
        start: {
          line: 104,
          column: 24
        },
        end: {
          line: 106,
          column: 25
        }
      },
      "70": {
        start: {
          line: 105,
          column: 28
        },
        end: {
          line: 105,
          column: 67
        }
      },
      "71": {
        start: {
          line: 107,
          column: 24
        },
        end: {
          line: 109,
          column: 27
        }
      },
      "72": {
        start: {
          line: 108,
          column: 28
        },
        end: {
          line: 108,
          column: 59
        }
      },
      "73": {
        start: {
          line: 110,
          column: 24
        },
        end: {
          line: 110,
          column: 78
        }
      },
      "74": {
        start: {
          line: 113,
          column: 24
        },
        end: {
          line: 113,
          column: 32
        }
      },
      "75": {
        start: {
          line: 117,
          column: 20
        },
        end: {
          line: 117,
          column: 30
        }
      },
      "76": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 142,
          column: 15
        }
      },
      "77": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 141,
          column: 17
        }
      },
      "78": {
        start: {
          line: 124,
          column: 35
        },
        end: {
          line: 124,
          column: 60
        }
      },
      "79": {
        start: {
          line: 125,
          column: 20
        },
        end: {
          line: 136,
          column: 21
        }
      },
      "80": {
        start: {
          line: 126,
          column: 46
        },
        end: {
          line: 126,
          column: 74
        }
      },
      "81": {
        start: {
          line: 127,
          column: 24
        },
        end: {
          line: 130,
          column: 25
        }
      },
      "82": {
        start: {
          line: 128,
          column: 28
        },
        end: {
          line: 128,
          column: 57
        }
      },
      "83": {
        start: {
          line: 129,
          column: 28
        },
        end: {
          line: 129,
          column: 35
        }
      },
      "84": {
        start: {
          line: 131,
          column: 24
        },
        end: {
          line: 131,
          column: 80
        }
      },
      "85": {
        start: {
          line: 132,
          column: 24
        },
        end: {
          line: 134,
          column: 64
        }
      },
      "86": {
        start: {
          line: 135,
          column: 24
        },
        end: {
          line: 135,
          column: 53
        }
      },
      "87": {
        start: {
          line: 137,
          column: 20
        },
        end: {
          line: 137,
          column: 59
        }
      },
      "88": {
        start: {
          line: 140,
          column: 20
        },
        end: {
          line: 140,
          column: 30
        }
      },
      "89": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 152,
          column: 26
        }
      },
      "90": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 64
        }
      },
      "91": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 151,
          column: 10
        }
      },
      "92": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 71
        }
      },
      "93": {
        start: {
          line: 153,
          column: 24
        },
        end: {
          line: 153,
          column: 62
        }
      },
      "94": {
        start: {
          line: 153,
          column: 47
        },
        end: {
          line: 153,
          column: 61
        }
      },
      "95": {
        start: {
          line: 154,
          column: 23
        },
        end: {
          line: 154,
          column: 24
        }
      },
      "96": {
        start: {
          line: 155,
          column: 23
        },
        end: {
          line: 165,
          column: 12
        }
      },
      "97": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "98": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 30
        }
      },
      "99": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 30
        }
      },
      "100": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "101": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 42
        }
      },
      "102": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 44
        }
      },
      "103": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 26
        }
      },
      "104": {
        start: {
          line: 166,
          column: 4
        },
        end: {
          line: 188,
          column: 79
        }
      },
      "105": {
        start: {
          line: 178,
          column: 52
        },
        end: {
          line: 178,
          column: 223
        }
      },
      "106": {
        start: {
          line: 182,
          column: 43
        },
        end: {
          line: 184,
          column: 188
        }
      },
      "107": {
        start: {
          line: 184,
          column: 77
        },
        end: {
          line: 184,
          column: 82
        }
      },
      "108": {
        start: {
          line: 184,
          column: 96
        },
        end: {
          line: 184,
          column: 185
        }
      },
      "109": {
        start: {
          line: 187,
          column: 46
        },
        end: {
          line: 188,
          column: 73
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 3,
            column: 18
          },
          end: {
            line: 3,
            column: 19
          }
        },
        loc: {
          start: {
            line: 3,
            column: 27
          },
          end: {
            line: 14,
            column: 2
          }
        },
        line: 3
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 3,
            column: 39
          },
          end: {
            line: 3,
            column: 40
          }
        },
        loc: {
          start: {
            line: 3,
            column: 60
          },
          end: {
            line: 14,
            column: 1
          }
        },
        line: 3
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 5,
            column: 33
          },
          end: {
            line: 5,
            column: 34
          }
        },
        loc: {
          start: {
            line: 5,
            column: 39
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 5
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 11,
            column: 34
          },
          end: {
            line: 11,
            column: 35
          }
        },
        loc: {
          start: {
            line: 11,
            column: 43
          },
          end: {
            line: 11,
            column: 54
          }
        },
        line: 11
      },
      "4": {
        name: "getCanvasWithViewBox",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 29
          }
        },
        loc: {
          start: {
            line: 15,
            column: 38
          },
          end: {
            line: 23,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 39
          },
          end: {
            line: 24,
            column: 40
          }
        },
        loc: {
          start: {
            line: 24,
            column: 55
          },
          end: {
            line: 189,
            column: 1
          }
        },
        line: 24
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 31,
            column: 27
          },
          end: {
            line: 31,
            column: 28
          }
        },
        loc: {
          start: {
            line: 31,
            column: 45
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 31
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 45,
            column: 30
          },
          end: {
            line: 45,
            column: 31
          }
        },
        loc: {
          start: {
            line: 45,
            column: 41
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 45
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 56,
            column: 30
          },
          end: {
            line: 56,
            column: 31
          }
        },
        loc: {
          start: {
            line: 56,
            column: 41
          },
          end: {
            line: 66,
            column: 5
          }
        },
        line: 56
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 67,
            column: 28
          },
          end: {
            line: 67,
            column: 29
          }
        },
        loc: {
          start: {
            line: 67,
            column: 39
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 67
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 78,
            column: 35
          },
          end: {
            line: 78,
            column: 36
          }
        },
        loc: {
          start: {
            line: 78,
            column: 42
          },
          end: {
            line: 144,
            column: 5
          }
        },
        line: 78
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 79,
            column: 21
          },
          end: {
            line: 79,
            column: 22
          }
        },
        loc: {
          start: {
            line: 79,
            column: 36
          },
          end: {
            line: 120,
            column: 9
          }
        },
        line: 79
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 80,
            column: 31
          },
          end: {
            line: 80,
            column: 32
          }
        },
        loc: {
          start: {
            line: 80,
            column: 58
          },
          end: {
            line: 119,
            column: 13
          }
        },
        line: 80
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 99,
            column: 30
          },
          end: {
            line: 99,
            column: 31
          }
        },
        loc: {
          start: {
            line: 99,
            column: 42
          },
          end: {
            line: 111,
            column: 21
          }
        },
        line: 99
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 107,
            column: 49
          },
          end: {
            line: 107,
            column: 50
          }
        },
        loc: {
          start: {
            line: 107,
            column: 60
          },
          end: {
            line: 109,
            column: 25
          }
        },
        line: 107
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 112,
            column: 31
          },
          end: {
            line: 112,
            column: 32
          }
        },
        loc: {
          start: {
            line: 112,
            column: 38
          },
          end: {
            line: 114,
            column: 21
          }
        },
        line: 112
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 121,
            column: 19
          },
          end: {
            line: 121,
            column: 20
          }
        },
        loc: {
          start: {
            line: 121,
            column: 25
          },
          end: {
            line: 143,
            column: 9
          }
        },
        line: 121
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 122,
            column: 31
          },
          end: {
            line: 122,
            column: 32
          }
        },
        loc: {
          start: {
            line: 122,
            column: 52
          },
          end: {
            line: 142,
            column: 13
          }
        },
        line: 122
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 147,
            column: 20
          },
          end: {
            line: 147,
            column: 21
          }
        },
        loc: {
          start: {
            line: 147,
            column: 26
          },
          end: {
            line: 152,
            column: 5
          }
        },
        line: 147
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 149,
            column: 15
          },
          end: {
            line: 149,
            column: 16
          }
        },
        loc: {
          start: {
            line: 149,
            column: 21
          },
          end: {
            line: 151,
            column: 9
          }
        },
        line: 149
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 153,
            column: 37
          },
          end: {
            line: 153,
            column: 38
          }
        },
        loc: {
          start: {
            line: 153,
            column: 47
          },
          end: {
            line: 153,
            column: 61
          }
        },
        line: 153
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 155,
            column: 36
          },
          end: {
            line: 155,
            column: 37
          }
        },
        loc: {
          start: {
            line: 155,
            column: 58
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 155
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 178,
            column: 32
          },
          end: {
            line: 178,
            column: 33
          }
        },
        loc: {
          start: {
            line: 178,
            column: 52
          },
          end: {
            line: 178,
            column: 223
          }
        },
        line: 178
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 182,
            column: 32
          },
          end: {
            line: 182,
            column: 33
          }
        },
        loc: {
          start: {
            line: 182,
            column: 43
          },
          end: {
            line: 184,
            column: 188
          }
        },
        line: 182
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 184,
            column: 67
          },
          end: {
            line: 184,
            column: 68
          }
        },
        loc: {
          start: {
            line: 184,
            column: 77
          },
          end: {
            line: 184,
            column: 82
          }
        },
        line: 184
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 184,
            column: 88
          },
          end: {
            line: 184,
            column: 89
          }
        },
        loc: {
          start: {
            line: 184,
            column: 96
          },
          end: {
            line: 184,
            column: 185
          }
        },
        line: 184
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 187,
            column: 27
          },
          end: {
            line: 187,
            column: 28
          }
        },
        loc: {
          start: {
            line: 187,
            column: 46
          },
          end: {
            line: 188,
            column: 73
          }
        },
        line: 187
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 6,
            column: 8
          },
          end: {
            line: 8,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 6,
            column: 8
          },
          end: {
            line: 8,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 6
      },
      "1": {
        loc: {
          start: {
            line: 25,
            column: 73
          },
          end: {
            line: 25,
            column: 99
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 25,
            column: 78
          },
          end: {
            line: 25,
            column: 99
          }
        }],
        line: 25
      },
      "2": {
        loc: {
          start: {
            line: 25,
            column: 101
          },
          end: {
            line: 25,
            column: 115
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 25,
            column: 109
          },
          end: {
            line: 25,
            column: 115
          }
        }],
        line: 25
      },
      "3": {
        loc: {
          start: {
            line: 25,
            column: 117
          },
          end: {
            line: 25,
            column: 132
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 25,
            column: 126
          },
          end: {
            line: 25,
            column: 132
          }
        }],
        line: 25
      },
      "4": {
        loc: {
          start: {
            line: 25,
            column: 134
          },
          end: {
            line: 25,
            column: 167
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 25,
            column: 146
          },
          end: {
            line: 25,
            column: 167
          }
        }],
        line: 25
      },
      "5": {
        loc: {
          start: {
            line: 25,
            column: 169
          },
          end: {
            line: 25,
            column: 188
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 25,
            column: 183
          },
          end: {
            line: 25,
            column: 188
          }
        }],
        line: 25
      },
      "6": {
        loc: {
          start: {
            line: 25,
            column: 190
          },
          end: {
            line: 25,
            column: 210
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 25,
            column: 208
          },
          end: {
            line: 25,
            column: 210
          }
        }],
        line: 25
      },
      "7": {
        loc: {
          start: {
            line: 25,
            column: 212
          },
          end: {
            line: 25,
            column: 245
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 25,
            column: 240
          },
          end: {
            line: 25,
            column: 245
          }
        }],
        line: 25
      },
      "8": {
        loc: {
          start: {
            line: 25,
            column: 247
          },
          end: {
            line: 25,
            column: 290
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 25,
            column: 284
          },
          end: {
            line: 25,
            column: 290
          }
        }],
        line: 25
      },
      "9": {
        loc: {
          start: {
            line: 25,
            column: 292
          },
          end: {
            line: 25,
            column: 320
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 25,
            column: 315
          },
          end: {
            line: 25,
            column: 320
          }
        }],
        line: 25
      },
      "10": {
        loc: {
          start: {
            line: 25,
            column: 322
          },
          end: {
            line: 28,
            column: 5
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 25,
            column: 330
          },
          end: {
            line: 28,
            column: 5
          }
        }],
        line: 25
      },
      "11": {
        loc: {
          start: {
            line: 33,
            column: 27
          },
          end: {
            line: 33,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 27
          },
          end: {
            line: 33,
            column: 41
          }
        }, {
          start: {
            line: 33,
            column: 45
          },
          end: {
            line: 33,
            column: 46
          }
        }],
        line: 33
      },
      "12": {
        loc: {
          start: {
            line: 34,
            column: 26
          },
          end: {
            line: 34,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 26
          },
          end: {
            line: 34,
            column: 40
          }
        }, {
          start: {
            line: 34,
            column: 44
          },
          end: {
            line: 34,
            column: 45
          }
        }],
        line: 34
      },
      "13": {
        loc: {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "14": {
        loc: {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "15": {
        loc: {
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 48,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 47,
            column: 42
          }
        }, {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 48,
            column: 54
          }
        }],
        line: 47
      },
      "16": {
        loc: {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 52,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 52,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "17": {
        loc: {
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 51,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 51,
            column: 41
          }
        }, {
          start: {
            line: 51,
            column: 45
          },
          end: {
            line: 51,
            column: 63
          }
        }],
        line: 51
      },
      "18": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 58,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 58,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "19": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "20": {
        loc: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 61,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 60,
            column: 42
          }
        }, {
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 61,
            column: 54
          }
        }],
        line: 60
      },
      "21": {
        loc: {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 69,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 69,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "22": {
        loc: {
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 68,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 68,
            column: 41
          }
        }, {
          start: {
            line: 68,
            column: 45
          },
          end: {
            line: 68,
            column: 63
          }
        }],
        line: 68
      },
      "23": {
        loc: {
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "24": {
        loc: {
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 72,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 71,
            column: 42
          }
        }, {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 72,
            column: 54
          }
        }],
        line: 71
      },
      "25": {
        loc: {
          start: {
            line: 83,
            column: 20
          },
          end: {
            line: 85,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 20
          },
          end: {
            line: 85,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "26": {
        loc: {
          start: {
            line: 89,
            column: 20
          },
          end: {
            line: 97,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 20
          },
          end: {
            line: 97,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "27": {
        loc: {
          start: {
            line: 104,
            column: 24
          },
          end: {
            line: 106,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 24
          },
          end: {
            line: 106,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "28": {
        loc: {
          start: {
            line: 124,
            column: 35
          },
          end: {
            line: 124,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 124,
            column: 35
          },
          end: {
            line: 124,
            column: 52
          }
        }, {
          start: {
            line: 124,
            column: 56
          },
          end: {
            line: 124,
            column: 60
          }
        }],
        line: 124
      },
      "29": {
        loc: {
          start: {
            line: 125,
            column: 20
          },
          end: {
            line: 136,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 20
          },
          end: {
            line: 136,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "30": {
        loc: {
          start: {
            line: 127,
            column: 24
          },
          end: {
            line: 130,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 24
          },
          end: {
            line: 130,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "31": {
        loc: {
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "32": {
        loc: {
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "33": {
        loc: {
          start: {
            line: 180,
            column: 16
          },
          end: {
            line: 181,
            column: 186
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 180,
            column: 16
          },
          end: {
            line: 180,
            column: 31
          }
        }, {
          start: {
            line: 180,
            column: 36
          },
          end: {
            line: 181,
            column: 185
          }
        }],
        line: 180
      },
      "34": {
        loc: {
          start: {
            line: 186,
            column: 131
          },
          end: {
            line: 186,
            column: 188
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 186,
            column: 149
          },
          end: {
            line: 186,
            column: 174
          }
        }, {
          start: {
            line: 186,
            column: 177
          },
          end: {
            line: 186,
            column: 188
          }
        }],
        line: 186
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0],
      "3": [0],
      "4": [0],
      "5": [0],
      "6": [0],
      "7": [0],
      "8": [0],
      "9": [0],
      "10": [0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "317c21a99c8bf0f995546f3a66265470aeb29b9d"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1z2c2igzc5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_1z2c2igzc5();
cov_1z2c2igzc5().s[0]++;

var loadImage = function loadImage(url) {
  cov_1z2c2igzc5().f[0]++;
  cov_1z2c2igzc5().s[1]++;
  return new Promise(function (resolve, reject) {
    cov_1z2c2igzc5().f[1]++;
    var img = (cov_1z2c2igzc5().s[2]++, new Image());
    cov_1z2c2igzc5().s[3]++;
    img.addEventListener('load', function () {
      cov_1z2c2igzc5().f[2]++;
      cov_1z2c2igzc5().s[4]++;

      if (img.width > 0) {
        cov_1z2c2igzc5().b[0][0]++;
        cov_1z2c2igzc5().s[5]++;
        resolve(img);
      } else {
        cov_1z2c2igzc5().b[0][1]++;
      }

      cov_1z2c2igzc5().s[6]++;
      reject('Image not found');
    });
    cov_1z2c2igzc5().s[7]++;
    img.addEventListener('error', function (err) {
      cov_1z2c2igzc5().f[3]++;
      cov_1z2c2igzc5().s[8]++;
      return reject(err);
    });
    cov_1z2c2igzc5().s[9]++;
    img.src = url;
    cov_1z2c2igzc5().s[10]++;
    img.setAttribute('crossorigin', 'anonymous');
  });
};

function getCanvasWithViewBox(canvas) {
  var _canvas$firstChild;

  cov_1z2c2igzc5().f[4]++;
  var svgCanvas = (cov_1z2c2igzc5().s[11]++, (_canvas$firstChild = canvas.firstChild) == null ? void 0 : _canvas$firstChild.cloneNode(true));
  var width = (cov_1z2c2igzc5().s[12]++, canvas.offsetWidth);
  var height = (cov_1z2c2igzc5().s[13]++, canvas.offsetHeight);
  cov_1z2c2igzc5().s[14]++;
  svgCanvas.setAttribute('viewBox', "0 0 " + width + " " + height);
  cov_1z2c2igzc5().s[15]++;
  svgCanvas.setAttribute('width', width.toString());
  cov_1z2c2igzc5().s[16]++;
  svgCanvas.setAttribute('height', height.toString());
  cov_1z2c2igzc5().s[17]++;
  return {
    svgCanvas: svgCanvas,
    width: width,
    height: height
  };
}

var Canvas = ( cov_1z2c2igzc5().s[18]++, /*#__PURE__*/React.forwardRef(function (props, ref) {
  cov_1z2c2igzc5().f[5]++;

  var _ref = (cov_1z2c2igzc5().s[19]++, props),
      paths = _ref.paths,
      isDrawing = _ref.isDrawing,
      onPointerDown = _ref.onPointerDown,
      onPointerMove = _ref.onPointerMove,
      onPointerUp = _ref.onPointerUp,
      _ref$id = _ref.id,
      id = _ref$id === void 0 ? (cov_1z2c2igzc5().b[1][0]++, 'react-sketch-canvas') : _ref$id,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? (cov_1z2c2igzc5().b[2][0]++, '100%') : _ref$width,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? (cov_1z2c2igzc5().b[3][0]++, '100%') : _ref$height,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? (cov_1z2c2igzc5().b[4][0]++, 'react-sketch-canvas') : _ref$className,
      _ref$canvasColor = _ref.canvasColor,
      canvasColor = _ref$canvasColor === void 0 ? (cov_1z2c2igzc5().b[5][0]++, 'red') : _ref$canvasColor,
      _ref$backgroundImage = _ref.backgroundImage,
      backgroundImage = _ref$backgroundImage === void 0 ? (cov_1z2c2igzc5().b[6][0]++, '') : _ref$backgroundImage,
      _ref$exportWithBackgr = _ref.exportWithBackgroundImage,
      exportWithBackgroundImage = _ref$exportWithBackgr === void 0 ? (cov_1z2c2igzc5().b[7][0]++, false) : _ref$exportWithBackgr,
      _ref$preserveBackgrou = _ref.preserveBackgroundImageAspectRatio,
      preserveBackgroundImageAspectRatio = _ref$preserveBackgrou === void 0 ? (cov_1z2c2igzc5().b[8][0]++, 'none') : _ref$preserveBackgrou,
      _ref$allowOnlyPointer = _ref.allowOnlyPointerType,
      allowOnlyPointerType = _ref$allowOnlyPointer === void 0 ? (cov_1z2c2igzc5().b[9][0]++, 'all') : _ref$allowOnlyPointer,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? (cov_1z2c2igzc5().b[10][0]++, {
    border: '0.0625rem solid #9c9c9c',
    borderRadius: '0.25rem'
  }) : _ref$style;

  var canvasRef = (cov_1z2c2igzc5().s[20]++, React.useRef(null)); // Converts mouse coordinates to relative coordinate based on the absolute position of svg

  cov_1z2c2igzc5().s[21]++;

  var getCoordinates = function getCoordinates(pointerEvent) {
    var _canvasRef$current, _ref2, _ref3;

    cov_1z2c2igzc5().f[6]++;
    var boundingArea = (cov_1z2c2igzc5().s[22]++, (_canvasRef$current = canvasRef.current) == null ? void 0 : _canvasRef$current.getBoundingClientRect());
    var scrollLeft = (cov_1z2c2igzc5().s[23]++, (_ref2 = (cov_1z2c2igzc5().b[11][0]++, window.scrollX)) != null ? _ref2 : (cov_1z2c2igzc5().b[11][1]++, 0));
    var scrollTop = (cov_1z2c2igzc5().s[24]++, (_ref3 = (cov_1z2c2igzc5().b[12][0]++, window.scrollY)) != null ? _ref3 : (cov_1z2c2igzc5().b[12][1]++, 0));
    cov_1z2c2igzc5().s[25]++;

    if (!boundingArea) {
      cov_1z2c2igzc5().b[13][0]++;
      cov_1z2c2igzc5().s[26]++;
      return {
        x: 0,
        y: 0
      };
    } else {
      cov_1z2c2igzc5().b[13][1]++;
    }

    var point = (cov_1z2c2igzc5().s[27]++, {
      x: pointerEvent.pageX - boundingArea.left - scrollLeft,
      y: pointerEvent.pageY - boundingArea.top - scrollTop
    });
    cov_1z2c2igzc5().s[28]++;
    return point;
  };
  /* Mouse Handlers - Mouse down, move and up */


  cov_1z2c2igzc5().s[29]++;

  var handlePointerDown = function handlePointerDown(event) {
    cov_1z2c2igzc5().f[7]++;
    cov_1z2c2igzc5().s[30]++;

    // Allow only chosen pointer type
    if ((cov_1z2c2igzc5().b[15][0]++, allowOnlyPointerType !== 'all') && (cov_1z2c2igzc5().b[15][1]++, event.pointerType !== allowOnlyPointerType)) {
      cov_1z2c2igzc5().b[14][0]++;
      cov_1z2c2igzc5().s[31]++;
      return;
    } else {
      cov_1z2c2igzc5().b[14][1]++;
    }

    cov_1z2c2igzc5().s[32]++;

    if ((cov_1z2c2igzc5().b[17][0]++, event.pointerType === 'mouse') && (cov_1z2c2igzc5().b[17][1]++, event.button !== 0)) {
      cov_1z2c2igzc5().b[16][0]++;
      cov_1z2c2igzc5().s[33]++;
      return;
    } else {
      cov_1z2c2igzc5().b[16][1]++;
    }

    var point = (cov_1z2c2igzc5().s[34]++, getCoordinates(event));
    cov_1z2c2igzc5().s[35]++;
    onPointerDown(point);
  };

  cov_1z2c2igzc5().s[36]++;

  var handlePointerMove = function handlePointerMove(event) {
    cov_1z2c2igzc5().f[8]++;
    cov_1z2c2igzc5().s[37]++;

    if (!isDrawing) {
      cov_1z2c2igzc5().b[18][0]++;
      cov_1z2c2igzc5().s[38]++;
      return;
    } else {
      cov_1z2c2igzc5().b[18][1]++;
    } // Allow only chosen pointer type


    cov_1z2c2igzc5().s[39]++;

    if ((cov_1z2c2igzc5().b[20][0]++, allowOnlyPointerType !== 'all') && (cov_1z2c2igzc5().b[20][1]++, event.pointerType !== allowOnlyPointerType)) {
      cov_1z2c2igzc5().b[19][0]++;
      cov_1z2c2igzc5().s[40]++;
      return;
    } else {
      cov_1z2c2igzc5().b[19][1]++;
    }

    var point = (cov_1z2c2igzc5().s[41]++, getCoordinates(event));
    cov_1z2c2igzc5().s[42]++;
    onPointerMove(point);
  };

  cov_1z2c2igzc5().s[43]++;

  var handlePointerUp = function handlePointerUp(event) {
    cov_1z2c2igzc5().f[9]++;
    cov_1z2c2igzc5().s[44]++;

    if ((cov_1z2c2igzc5().b[22][0]++, event.pointerType === 'mouse') && (cov_1z2c2igzc5().b[22][1]++, event.button !== 0)) {
      cov_1z2c2igzc5().b[21][0]++;
      cov_1z2c2igzc5().s[45]++;
      return;
    } else {
      cov_1z2c2igzc5().b[21][1]++;
    } // Allow only chosen pointer type


    cov_1z2c2igzc5().s[46]++;

    if ((cov_1z2c2igzc5().b[24][0]++, allowOnlyPointerType !== 'all') && (cov_1z2c2igzc5().b[24][1]++, event.pointerType !== allowOnlyPointerType)) {
      cov_1z2c2igzc5().b[23][0]++;
      cov_1z2c2igzc5().s[47]++;
      return;
    } else {
      cov_1z2c2igzc5().b[23][1]++;
    }

    cov_1z2c2igzc5().s[48]++;
    onPointerUp();
  };
  /* Mouse Handlers ends */


  cov_1z2c2igzc5().s[49]++;
  React.useImperativeHandle(ref, function () {
    cov_1z2c2igzc5().f[10]++;
    cov_1z2c2igzc5().s[50]++;
    return {
      exportImage: function exportImage(imageType) {
        cov_1z2c2igzc5().f[11]++;
        cov_1z2c2igzc5().s[51]++;
        return new Promise( /*#__PURE__*/function () {
          var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve, reject) {
            var canvas, _ref5, svgCanvas, _width, _height, canvasSketch, loadImagePromises, img;

            return _regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    cov_1z2c2igzc5().f[12]++;
                    cov_1z2c2igzc5().s[52]++;
                    _context.prev = 2;
                    canvas = (cov_1z2c2igzc5().s[53]++, canvasRef.current);
                    cov_1z2c2igzc5().s[54]++;

                    if (canvas) {
                      _context.next = 11;
                      break;
                    }

                    cov_1z2c2igzc5().b[25][0]++;
                    cov_1z2c2igzc5().s[55]++;
                    throw Error('Canvas not rendered yet');

                  case 11:
                    cov_1z2c2igzc5().b[25][1]++;

                  case 12:
                    _ref5 = (cov_1z2c2igzc5().s[56]++, getCanvasWithViewBox(canvas)), svgCanvas = _ref5.svgCanvas, _width = _ref5.width, _height = _ref5.height;
                    canvasSketch = (cov_1z2c2igzc5().s[57]++, "data:image/svg+xml;base64," + btoa(svgCanvas.outerHTML));
                    cov_1z2c2igzc5().s[58]++;
                    _context.next = 17;
                    return loadImage(canvasSketch);

                  case 17:
                    _context.t0 = _context.sent;
                    loadImagePromises = [_context.t0];
                    cov_1z2c2igzc5().s[59]++;

                    if (!exportWithBackgroundImage) {
                      _context.next = 38;
                      break;
                    }

                    cov_1z2c2igzc5().b[26][0]++;
                    cov_1z2c2igzc5().s[60]++;
                    _context.prev = 23;
                    cov_1z2c2igzc5().s[61]++;
                    _context.next = 27;
                    return loadImage(backgroundImage);

                  case 27:
                    img = _context.sent;
                    cov_1z2c2igzc5().s[62]++;
                    loadImagePromises.push(img);
                    _context.next = 36;
                    break;

                  case 32:
                    _context.prev = 32;
                    _context.t1 = _context["catch"](23);
                    cov_1z2c2igzc5().s[63]++;
                    console.warn('exportWithBackgroundImage props is set without a valid background image URL. This option is ignored');

                  case 36:
                    _context.next = 39;
                    break;

                  case 38:
                    cov_1z2c2igzc5().b[26][1]++;

                  case 39:
                    cov_1z2c2igzc5().s[64]++;
                    Promise.all(loadImagePromises).then(function (images) {
                      cov_1z2c2igzc5().f[13]++;
                      var renderCanvas = (cov_1z2c2igzc5().s[65]++, document.createElement('canvas'));
                      cov_1z2c2igzc5().s[66]++;
                      renderCanvas.setAttribute('width', _width.toString());
                      cov_1z2c2igzc5().s[67]++;
                      renderCanvas.setAttribute('height', _height.toString());
                      var context = (cov_1z2c2igzc5().s[68]++, renderCanvas.getContext('2d'));
                      cov_1z2c2igzc5().s[69]++;

                      if (!context) {
                        cov_1z2c2igzc5().b[27][0]++;
                        cov_1z2c2igzc5().s[70]++;
                        throw Error('Canvas not rendered yet');
                      } else {
                        cov_1z2c2igzc5().b[27][1]++;
                      }

                      cov_1z2c2igzc5().s[71]++;
                      images.reverse().forEach(function (image) {
                        cov_1z2c2igzc5().f[14]++;
                        cov_1z2c2igzc5().s[72]++;
                        context.drawImage(image, 0, 0);
                      });
                      cov_1z2c2igzc5().s[73]++;
                      resolve(renderCanvas.toDataURL("image/" + imageType));
                    })["catch"](function (e) {
                      cov_1z2c2igzc5().f[15]++;
                      cov_1z2c2igzc5().s[74]++;
                      throw e;
                    });
                    _context.next = 47;
                    break;

                  case 43:
                    _context.prev = 43;
                    _context.t2 = _context["catch"](2);
                    cov_1z2c2igzc5().s[75]++;
                    reject(_context.t2);

                  case 47:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, null, [[2, 43], [23, 32]]);
          }));

          return function (_x, _x2) {
            return _ref4.apply(this, arguments);
          };
        }());
      },
      exportSvg: function exportSvg() {
        cov_1z2c2igzc5().f[16]++;
        cov_1z2c2igzc5().s[76]++;
        return new Promise(function (resolve, reject) {
          cov_1z2c2igzc5().f[17]++;
          cov_1z2c2igzc5().s[77]++;

          try {
            var _ref6;

            var canvas = (cov_1z2c2igzc5().s[78]++, (_ref6 = (cov_1z2c2igzc5().b[28][0]++, canvasRef.current)) != null ? _ref6 : (cov_1z2c2igzc5().b[28][1]++, null));
            cov_1z2c2igzc5().s[79]++;

            if (canvas !== null) {
              var _svgCanvas$querySelec, _svgCanvas$querySelec2;

              cov_1z2c2igzc5().b[29][0]++;

              var _ref7 = (cov_1z2c2igzc5().s[80]++, getCanvasWithViewBox(canvas)),
                  svgCanvas = _ref7.svgCanvas;

              cov_1z2c2igzc5().s[81]++;

              if (exportWithBackgroundImage) {
                cov_1z2c2igzc5().b[30][0]++;
                cov_1z2c2igzc5().s[82]++;
                resolve(svgCanvas.outerHTML);
                cov_1z2c2igzc5().s[83]++;
                return;
              } else {
                cov_1z2c2igzc5().b[30][1]++;
              }

              cov_1z2c2igzc5().s[84]++;
              (_svgCanvas$querySelec = svgCanvas.querySelector("#" + id + "__background")) == null ? void 0 : _svgCanvas$querySelec.remove();
              cov_1z2c2igzc5().s[85]++;
              (_svgCanvas$querySelec2 = svgCanvas.querySelector("#" + id + "__canvas-background")) == null ? void 0 : _svgCanvas$querySelec2.setAttribute('fill', canvasColor);
              cov_1z2c2igzc5().s[86]++;
              resolve(svgCanvas.outerHTML);
            } else {
              cov_1z2c2igzc5().b[29][1]++;
            }

            cov_1z2c2igzc5().s[87]++;
            reject(new Error('Canvas not loaded'));
          } catch (e) {
            cov_1z2c2igzc5().s[88]++;
            reject(e);
          }
        });
      }
    };
  });
  /* Add event listener to Mouse up and Touch up to
  release drawing even when point goes out of canvas */

  cov_1z2c2igzc5().s[89]++;
  React.useEffect(function () {
    cov_1z2c2igzc5().f[18]++;
    cov_1z2c2igzc5().s[90]++;
    document.addEventListener('pointerup', handlePointerUp);
    cov_1z2c2igzc5().s[91]++;
    return function () {
      cov_1z2c2igzc5().f[19]++;
      cov_1z2c2igzc5().s[92]++;
      document.removeEventListener('pointerup', handlePointerUp);
    };
  }, [handlePointerUp]);
  var eraserPaths = (cov_1z2c2igzc5().s[93]++, paths.filter(function (path) {
    cov_1z2c2igzc5().f[20]++;
    cov_1z2c2igzc5().s[94]++;
    return !path.drawMode;
  }));
  var currentGroup = (cov_1z2c2igzc5().s[95]++, 0);
  var pathGroups = (cov_1z2c2igzc5().s[96]++, paths.reduce(function (arrayGroup, path) {
    cov_1z2c2igzc5().f[21]++;
    cov_1z2c2igzc5().s[97]++;

    if (!path.drawMode) {
      cov_1z2c2igzc5().b[31][0]++;
      cov_1z2c2igzc5().s[98]++;
      currentGroup += 1;
      cov_1z2c2igzc5().s[99]++;
      return arrayGroup;
    } else {
      cov_1z2c2igzc5().b[31][1]++;
    }

    cov_1z2c2igzc5().s[100]++;

    if (arrayGroup[currentGroup] === undefined) {
      cov_1z2c2igzc5().b[32][0]++;
      cov_1z2c2igzc5().s[101]++;
      arrayGroup[currentGroup] = [];
    } else {
      cov_1z2c2igzc5().b[32][1]++;
    }

    cov_1z2c2igzc5().s[102]++;
    arrayGroup[currentGroup].push(path);
    cov_1z2c2igzc5().s[103]++;
    return arrayGroup;
  }, [[]]));
  cov_1z2c2igzc5().s[104]++;
  return React.createElement("div", {
    role: "presentation",
    "aria-label": "react-sketch-canvas",
    ref: canvasRef,
    className: className,
    style: _extends({
      touchAction: 'none',
      width: width,
      height: height
    }, style),
    "touch-action": "none",
    onPointerDown: handlePointerDown,
    onPointerMove: handlePointerMove,
    onPointerUp: handlePointerUp
  }, React.createElement("svg", {
    version: "1.1",
    baseProfile: "full",
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink",
    style: {
      width: '100%',
      height: '100%'
    },
    id: id
  }, React.createElement("g", {
    id: id + "__eraser-stroke-group",
    display: "none"
  }, React.createElement("rect", {
    id: id + "__mask-background",
    x: "0",
    y: "0",
    width: "100%",
    height: "100%",
    fill: "white"
  }), eraserPaths.map(function (eraserPath, i) {
    cov_1z2c2igzc5().f[22]++;
    cov_1z2c2igzc5().s[105]++;
    return React.createElement(SvgPath, {
      key: id + "__eraser-" + i,
      id: id + "__eraser-" + i,
      paths: eraserPath.paths,
      strokeColor: "#000000",
      strokeWidth: eraserPath.strokeWidth
    });
  })), React.createElement("defs", null, (cov_1z2c2igzc5().b[33][0]++, backgroundImage) && (cov_1z2c2igzc5().b[33][1]++, React.createElement("pattern", {
    id: id + "__background",
    x: "0",
    y: "0",
    width: "100%",
    height: "100%",
    patternUnits: "userSpaceOnUse"
  }, React.createElement("image", {
    x: "0",
    y: "0",
    width: "100%",
    height: "100%",
    xlinkHref: backgroundImage,
    preserveAspectRatio: preserveBackgroundImageAspectRatio
  }))), eraserPaths.map(function (_, i) {
    cov_1z2c2igzc5().f[23]++;
    cov_1z2c2igzc5().s[106]++;
    return React.createElement("mask", {
      id: id + "__eraser-mask-" + i,
      key: id + "__eraser-mask-" + i,
      maskUnits: "userSpaceOnUse"
    }, React.createElement("use", {
      href: "#" + id + "__mask-background"
    }), Array.from({
      length: eraserPaths.length - i
    }, function (_, j) {
      cov_1z2c2igzc5().f[24]++;
      cov_1z2c2igzc5().s[107]++;
      return j + i;
    }).map(function (k) {
      cov_1z2c2igzc5().f[25]++;
      cov_1z2c2igzc5().s[108]++;
      return React.createElement("use", {
        key: k.toString(),
        href: "#" + id + "__eraser-" + k.toString()
      });
    }));
  })), React.createElement("g", {
    id: id + "__canvas-background-group"
  }, React.createElement("rect", {
    id: id + "__canvas-background",
    x: "0",
    y: "0",
    width: "100%",
    height: "100%",
    fill: backgroundImage ? (cov_1z2c2igzc5().b[34][0]++, "url(#" + id + "__background)") : (cov_1z2c2igzc5().b[34][1]++, canvasColor)
  })), pathGroups.map(function (pathGroup, i) {
    cov_1z2c2igzc5().f[26]++;
    cov_1z2c2igzc5().s[109]++;
    return React.createElement("g", {
      id: id + "__stroke-group-" + i,
      key: id + "__stroke-group-" + i,
      mask: "url(#" + id + "__eraser-mask-" + i + ")"
    }, React.createElement(Paths, {
      id: id,
      paths: pathGroup
    }));
  })));
}));

function cov_1yx7tpadr3() {
  var path = "/home/vinoth/projects/react-sketch-canvas/src/ReactSketchCanvas/index.tsx";
  var hash = "b2a537109f7bffcb588e5c596cf0910c6ae5d7e9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/vinoth/projects/react-sketch-canvas/src/ReactSketchCanvas/index.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 33
        },
        end: {
          line: 172,
          column: 2
        }
      },
      "1": {
        start: {
          line: 7,
          column: 100
        },
        end: {
          line: 7,
          column: 105
        }
      },
      "2": {
        start: {
          line: 8,
          column: 22
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "3": {
        start: {
          line: 9,
          column: 36
        },
        end: {
          line: 9,
          column: 56
        }
      },
      "4": {
        start: {
          line: 10,
          column: 38
        },
        end: {
          line: 10,
          column: 59
        }
      },
      "5": {
        start: {
          line: 11,
          column: 40
        },
        end: {
          line: 11,
          column: 58
        }
      },
      "6": {
        start: {
          line: 12,
          column: 38
        },
        end: {
          line: 12,
          column: 56
        }
      },
      "7": {
        start: {
          line: 13,
          column: 44
        },
        end: {
          line: 13,
          column: 62
        }
      },
      "8": {
        start: {
          line: 14,
          column: 25
        },
        end: {
          line: 21,
          column: 19
        }
      },
      "9": {
        start: {
          line: 15,
          column: 27
        },
        end: {
          line: 15,
          column: 62
        }
      },
      "10": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 19,
          column: 9
        }
      },
      "11": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 17,
          column: 45
        }
      },
      "12": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 18,
          column: 19
        }
      },
      "13": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 51
        }
      },
      "14": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 24,
          column: 20
        }
      },
      "15": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 23
        }
      },
      "16": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 27,
          column: 23
        }
      },
      "17": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 31
        }
      },
      "18": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 118,
          column: 8
        }
      },
      "19": {
        start: {
          line: 28,
          column: 42
        },
        end: {
          line: 118,
          column: 5
        }
      },
      "20": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 32
        }
      },
      "21": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 45
        }
      },
      "22": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 32
        }
      },
      "23": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 42,
          column: 13
        }
      },
      "24": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 39,
          column: 49
        }
      },
      "25": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 34
        }
      },
      "26": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 41,
          column: 23
        }
      },
      "27": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 83
        }
      },
      "28": {
        start: {
          line: 43,
          column: 40
        },
        end: {
          line: 43,
          column: 81
        }
      },
      "29": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 73
        }
      },
      "30": {
        start: {
          line: 44,
          column: 46
        },
        end: {
          line: 44,
          column: 71
        }
      },
      "31": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 49,
          column: 23
        }
      },
      "32": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 49,
          column: 23
        }
      },
      "33": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 53,
          column: 15
        }
      },
      "34": {
        start: {
          line: 50,
          column: 46
        },
        end: {
          line: 53,
          column: 13
        }
      },
      "35": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 64
        }
      },
      "36": {
        start: {
          line: 54,
          column: 40
        },
        end: {
          line: 54,
          column: 62
        }
      },
      "37": {
        start: {
          line: 57,
          column: 32
        },
        end: {
          line: 57,
          column: 62
        }
      },
      "38": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 63,
          column: 13
        }
      },
      "39": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 75
        }
      },
      "40": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 62,
          column: 46
        }
      },
      "41": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 80,
          column: 15
        }
      },
      "42": {
        start: {
          line: 67,
          column: 34
        },
        end: {
          line: 67,
          column: 62
        }
      },
      "43": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 79,
          column: 17
        }
      },
      "44": {
        start: {
          line: 69,
          column: 20
        },
        end: {
          line: 69,
          column: 81
        }
      },
      "45": {
        start: {
          line: 72,
          column: 20
        },
        end: {
          line: 78,
          column: 23
        }
      },
      "46": {
        start: {
          line: 74,
          column: 24
        },
        end: {
          line: 74,
          column: 38
        }
      },
      "47": {
        start: {
          line: 77,
          column: 24
        },
        end: {
          line: 77,
          column: 34
        }
      },
      "48": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 90,
          column: 15
        }
      },
      "49": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 89,
          column: 17
        }
      },
      "50": {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 85,
          column: 42
        }
      },
      "51": {
        start: {
          line: 88,
          column: 20
        },
        end: {
          line: 88,
          column: 30
        }
      },
      "52": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 75
        }
      },
      "53": {
        start: {
          line: 93,
          column: 46
        },
        end: {
          line: 93,
          column: 73
        }
      },
      "54": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 111,
          column: 15
        }
      },
      "55": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 99,
          column: 17
        }
      },
      "56": {
        start: {
          line: 98,
          column: 20
        },
        end: {
          line: 98,
          column: 88
        }
      },
      "57": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 110,
          column: 17
        }
      },
      "58": {
        start: {
          line: 101,
          column: 42
        },
        end: {
          line: 105,
          column: 25
        }
      },
      "59": {
        start: {
          line: 102,
          column: 47
        },
        end: {
          line: 102,
          column: 71
        }
      },
      "60": {
        start: {
          line: 103,
          column: 45
        },
        end: {
          line: 103,
          column: 67
        }
      },
      "61": {
        start: {
          line: 104,
          column: 24
        },
        end: {
          line: 104,
          column: 84
        }
      },
      "62": {
        start: {
          line: 106,
          column: 20
        },
        end: {
          line: 106,
          column: 43
        }
      },
      "63": {
        start: {
          line: 109,
          column: 20
        },
        end: {
          line: 109,
          column: 30
        }
      },
      "64": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 30
        }
      },
      "65": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 29
        }
      },
      "66": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 32
        }
      },
      "67": {
        start: {
          line: 119,
          column: 30
        },
        end: {
          line: 136,
          column: 5
        }
      },
      "68": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 27
        }
      },
      "69": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 121,
          column: 25
        }
      },
      "70": {
        start: {
          line: 122,
          column: 21
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "71": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "72": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 133,
          column: 14
        }
      },
      "73": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 69
        }
      },
      "74": {
        start: {
          line: 135,
          column: 42
        },
        end: {
          line: 135,
          column: 67
        }
      },
      "75": {
        start: {
          line: 137,
          column: 30
        },
        end: {
          line: 149,
          column: 5
        }
      },
      "76": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 139,
          column: 19
        }
      },
      "77": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 19
        }
      },
      "78": {
        start: {
          line: 140,
          column: 30
        },
        end: {
          line: 140,
          column: 55
        }
      },
      "79": {
        start: {
          line: 141,
          column: 30
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "80": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 148,
          column: 11
        }
      },
      "81": {
        start: {
          line: 145,
          column: 42
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "82": {
        start: {
          line: 150,
          column: 28
        },
        end: {
          line: 170,
          column: 5
        }
      },
      "83": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "84": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 19
        }
      },
      "85": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 28
        }
      },
      "86": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 157,
          column: 9
        }
      },
      "87": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 19
        }
      },
      "88": {
        start: {
          line: 158,
          column: 28
        },
        end: {
          line: 158,
          column: 63
        }
      },
      "89": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "90": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 19
        }
      },
      "91": {
        start: {
          line: 162,
          column: 30
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "92": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 169,
          column: 11
        }
      },
      "93": {
        start: {
          line: 166,
          column: 42
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "94": {
        start: {
          line: 171,
          column: 4
        },
        end: {
          line: 171,
          column: 506
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 3,
            column: 50
          },
          end: {
            line: 3,
            column: 51
          }
        },
        loc: {
          start: {
            line: 3,
            column: 66
          },
          end: {
            line: 172,
            column: 1
          }
        },
        line: 3
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 7,
            column: 18
          },
          end: {
            line: 7,
            column: 19
          }
        },
        loc: {
          start: {
            line: 7,
            column: 30
          },
          end: {
            line: 7,
            column: 33
          }
        },
        line: 7
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 47
          }
        },
        loc: {
          start: {
            line: 7,
            column: 68
          },
          end: {
            line: 7,
            column: 71
          }
        },
        line: 7
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 14,
            column: 43
          },
          end: {
            line: 14,
            column: 44
          }
        },
        loc: {
          start: {
            line: 14,
            column: 49
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 14
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 20
          },
          end: {
            line: 22,
            column: 21
          }
        },
        loc: {
          start: {
            line: 22,
            column: 26
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 25,
            column: 20
          },
          end: {
            line: 25,
            column: 21
          }
        },
        loc: {
          start: {
            line: 25,
            column: 26
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 28,
            column: 35
          },
          end: {
            line: 28,
            column: 36
          }
        },
        loc: {
          start: {
            line: 28,
            column: 42
          },
          end: {
            line: 118,
            column: 5
          }
        },
        line: 28
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 29,
            column: 19
          },
          end: {
            line: 29,
            column: 20
          }
        },
        loc: {
          start: {
            line: 29,
            column: 30
          },
          end: {
            line: 31,
            column: 9
          }
        },
        line: 29
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 32,
            column: 21
          },
          end: {
            line: 32,
            column: 22
          }
        },
        loc: {
          start: {
            line: 32,
            column: 27
          },
          end: {
            line: 35,
            column: 9
          }
        },
        line: 32
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 36,
            column: 14
          },
          end: {
            line: 36,
            column: 15
          }
        },
        loc: {
          start: {
            line: 36,
            column: 20
          },
          end: {
            line: 45,
            column: 9
          }
        },
        line: 36
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 43,
            column: 25
          },
          end: {
            line: 43,
            column: 26
          }
        },
        loc: {
          start: {
            line: 43,
            column: 40
          },
          end: {
            line: 43,
            column: 81
          }
        },
        line: 43
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 44,
            column: 28
          },
          end: {
            line: 44,
            column: 29
          }
        },
        loc: {
          start: {
            line: 44,
            column: 46
          },
          end: {
            line: 44,
            column: 71
          }
        },
        line: 44
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 46,
            column: 14
          },
          end: {
            line: 46,
            column: 15
          }
        },
        loc: {
          start: {
            line: 46,
            column: 20
          },
          end: {
            line: 55,
            column: 9
          }
        },
        line: 46
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 50,
            column: 28
          },
          end: {
            line: 50,
            column: 29
          }
        },
        loc: {
          start: {
            line: 50,
            column: 46
          },
          end: {
            line: 53,
            column: 13
          }
        },
        line: 50
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 54,
            column: 25
          },
          end: {
            line: 54,
            column: 26
          }
        },
        loc: {
          start: {
            line: 54,
            column: 40
          },
          end: {
            line: 54,
            column: 62
          }
        },
        line: 54
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 56,
            column: 21
          },
          end: {
            line: 56,
            column: 22
          }
        },
        loc: {
          start: {
            line: 56,
            column: 36
          },
          end: {
            line: 64,
            column: 9
          }
        },
        line: 56
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 65,
            column: 19
          },
          end: {
            line: 65,
            column: 20
          }
        },
        loc: {
          start: {
            line: 65,
            column: 25
          },
          end: {
            line: 81,
            column: 9
          }
        },
        line: 65
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 66,
            column: 31
          },
          end: {
            line: 66,
            column: 32
          }
        },
        loc: {
          start: {
            line: 66,
            column: 52
          },
          end: {
            line: 80,
            column: 13
          }
        },
        line: 66
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 73,
            column: 30
          },
          end: {
            line: 73,
            column: 31
          }
        },
        loc: {
          start: {
            line: 73,
            column: 40
          },
          end: {
            line: 75,
            column: 21
          }
        },
        line: 73
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 76,
            column: 31
          },
          end: {
            line: 76,
            column: 32
          }
        },
        loc: {
          start: {
            line: 76,
            column: 38
          },
          end: {
            line: 78,
            column: 21
          }
        },
        line: 76
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 82,
            column: 21
          },
          end: {
            line: 82,
            column: 22
          }
        },
        loc: {
          start: {
            line: 82,
            column: 27
          },
          end: {
            line: 91,
            column: 9
          }
        },
        line: 82
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 83,
            column: 31
          },
          end: {
            line: 83,
            column: 32
          }
        },
        loc: {
          start: {
            line: 83,
            column: 52
          },
          end: {
            line: 90,
            column: 13
          }
        },
        line: 83
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 92,
            column: 19
          },
          end: {
            line: 92,
            column: 20
          }
        },
        loc: {
          start: {
            line: 92,
            column: 30
          },
          end: {
            line: 94,
            column: 9
          }
        },
        line: 92
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 93,
            column: 28
          },
          end: {
            line: 93,
            column: 29
          }
        },
        loc: {
          start: {
            line: 93,
            column: 46
          },
          end: {
            line: 93,
            column: 73
          }
        },
        line: 93
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 95,
            column: 26
          },
          end: {
            line: 95,
            column: 27
          }
        },
        loc: {
          start: {
            line: 95,
            column: 32
          },
          end: {
            line: 112,
            column: 9
          }
        },
        line: 95
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 96,
            column: 31
          },
          end: {
            line: 96,
            column: 32
          }
        },
        loc: {
          start: {
            line: 96,
            column: 52
          },
          end: {
            line: 111,
            column: 13
          }
        },
        line: 96
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 101,
            column: 62
          },
          end: {
            line: 101,
            column: 63
          }
        },
        loc: {
          start: {
            line: 101,
            column: 92
          },
          end: {
            line: 105,
            column: 21
          }
        },
        line: 101
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 113,
            column: 21
          },
          end: {
            line: 113,
            column: 22
          }
        },
        loc: {
          start: {
            line: 113,
            column: 27
          },
          end: {
            line: 117,
            column: 9
          }
        },
        line: 113
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 119,
            column: 30
          },
          end: {
            line: 119,
            column: 31
          }
        },
        loc: {
          start: {
            line: 119,
            column: 41
          },
          end: {
            line: 136,
            column: 5
          }
        },
        line: 119
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 135,
            column: 24
          },
          end: {
            line: 135,
            column: 25
          }
        },
        loc: {
          start: {
            line: 135,
            column: 42
          },
          end: {
            line: 135,
            column: 67
          }
        },
        line: 135
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 137,
            column: 30
          },
          end: {
            line: 137,
            column: 31
          }
        },
        loc: {
          start: {
            line: 137,
            column: 41
          },
          end: {
            line: 149,
            column: 5
          }
        },
        line: 137
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 145,
            column: 24
          },
          end: {
            line: 145,
            column: 25
          }
        },
        loc: {
          start: {
            line: 145,
            column: 42
          },
          end: {
            line: 148,
            column: 9
          }
        },
        line: 145
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 150,
            column: 28
          },
          end: {
            line: 150,
            column: 29
          }
        },
        loc: {
          start: {
            line: 150,
            column: 34
          },
          end: {
            line: 170,
            column: 5
          }
        },
        line: 150
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 166,
            column: 24
          },
          end: {
            line: 166,
            column: 25
          }
        },
        loc: {
          start: {
            line: 166,
            column: 42
          },
          end: {
            line: 169,
            column: 9
          }
        },
        line: 166
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 4,
            column: 12
          },
          end: {
            line: 4,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 4,
            column: 17
          },
          end: {
            line: 4,
            column: 38
          }
        }],
        line: 4
      },
      "1": {
        loc: {
          start: {
            line: 4,
            column: 40
          },
          end: {
            line: 4,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 4,
            column: 48
          },
          end: {
            line: 4,
            column: 54
          }
        }],
        line: 4
      },
      "2": {
        loc: {
          start: {
            line: 4,
            column: 56
          },
          end: {
            line: 4,
            column: 71
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 4,
            column: 65
          },
          end: {
            line: 4,
            column: 71
          }
        }],
        line: 4
      },
      "3": {
        loc: {
          start: {
            line: 4,
            column: 73
          },
          end: {
            line: 4,
            column: 87
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 4,
            column: 85
          },
          end: {
            line: 4,
            column: 87
          }
        }],
        line: 4
      },
      "4": {
        loc: {
          start: {
            line: 4,
            column: 89
          },
          end: {
            line: 4,
            column: 110
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 4,
            column: 103
          },
          end: {
            line: 4,
            column: 110
          }
        }],
        line: 4
      },
      "5": {
        loc: {
          start: {
            line: 4,
            column: 112
          },
          end: {
            line: 4,
            column: 131
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 4,
            column: 126
          },
          end: {
            line: 4,
            column: 131
          }
        }],
        line: 4
      },
      "6": {
        loc: {
          start: {
            line: 4,
            column: 133
          },
          end: {
            line: 4,
            column: 153
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 4,
            column: 151
          },
          end: {
            line: 4,
            column: 153
          }
        }],
        line: 4
      },
      "7": {
        loc: {
          start: {
            line: 4,
            column: 155
          },
          end: {
            line: 4,
            column: 188
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 4,
            column: 183
          },
          end: {
            line: 4,
            column: 188
          }
        }],
        line: 4
      },
      "8": {
        loc: {
          start: {
            line: 4,
            column: 190
          },
          end: {
            line: 4,
            column: 233
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 4,
            column: 227
          },
          end: {
            line: 4,
            column: 233
          }
        }],
        line: 4
      },
      "9": {
        loc: {
          start: {
            line: 4,
            column: 235
          },
          end: {
            line: 4,
            column: 250
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 4,
            column: 249
          },
          end: {
            line: 4,
            column: 250
          }
        }],
        line: 4
      },
      "10": {
        loc: {
          start: {
            line: 4,
            column: 252
          },
          end: {
            line: 4,
            column: 267
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 4,
            column: 266
          },
          end: {
            line: 4,
            column: 267
          }
        }],
        line: 4
      },
      "11": {
        loc: {
          start: {
            line: 4,
            column: 269
          },
          end: {
            line: 4,
            column: 297
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 4,
            column: 292
          },
          end: {
            line: 4,
            column: 297
          }
        }],
        line: 4
      },
      "12": {
        loc: {
          start: {
            line: 4,
            column: 299
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 4,
            column: 307
          },
          end: {
            line: 7,
            column: 5
          }
        }],
        line: 4
      },
      "13": {
        loc: {
          start: {
            line: 7,
            column: 7
          },
          end: {
            line: 7,
            column: 33
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 7,
            column: 18
          },
          end: {
            line: 7,
            column: 33
          }
        }],
        line: 7
      },
      "14": {
        loc: {
          start: {
            line: 7,
            column: 35
          },
          end: {
            line: 7,
            column: 71
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 71
          }
        }],
        line: 7
      },
      "15": {
        loc: {
          start: {
            line: 7,
            column: 73
          },
          end: {
            line: 7,
            column: 94
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 7,
            column: 89
          },
          end: {
            line: 7,
            column: 94
          }
        }],
        line: 7
      },
      "16": {
        loc: {
          start: {
            line: 15,
            column: 27
          },
          end: {
            line: 15,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 27
          },
          end: {
            line: 15,
            column: 54
          }
        }, {
          start: {
            line: 15,
            column: 58
          },
          end: {
            line: 15,
            column: 62
          }
        }],
        line: 15
      },
      "17": {
        loc: {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 19,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 19,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "18": {
        loc: {
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 42,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 42,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "19": {
        loc: {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 49,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 49,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "20": {
        loc: {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 63,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 63,
            column: 13
          }
        }, {
          start: {
            line: 61,
            column: 17
          },
          end: {
            line: 63,
            column: 13
          }
        }],
        line: 58
      },
      "21": {
        loc: {
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 79,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 79,
            column: 17
          }
        }, {
          start: {
            line: 71,
            column: 21
          },
          end: {
            line: 79,
            column: 17
          }
        }],
        line: 68
      },
      "22": {
        loc: {
          start: {
            line: 97,
            column: 16
          },
          end: {
            line: 99,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 16
          },
          end: {
            line: 99,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "23": {
        loc: {
          start: {
            line: 102,
            column: 47
          },
          end: {
            line: 102,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 47
          },
          end: {
            line: 102,
            column: 66
          }
        }, {
          start: {
            line: 102,
            column: 70
          },
          end: {
            line: 102,
            column: 71
          }
        }],
        line: 102
      },
      "24": {
        loc: {
          start: {
            line: 103,
            column: 45
          },
          end: {
            line: 103,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 45
          },
          end: {
            line: 103,
            column: 62
          }
        }, {
          start: {
            line: 103,
            column: 66
          },
          end: {
            line: 103,
            column: 67
          }
        }],
        line: 103
      },
      "25": {
        loc: {
          start: {
            line: 124,
            column: 25
          },
          end: {
            line: 124,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 124,
            column: 36
          },
          end: {
            line: 124,
            column: 47
          }
        }, {
          start: {
            line: 124,
            column: 50
          },
          end: {
            line: 124,
            column: 59
          }
        }],
        line: 124
      },
      "26": {
        loc: {
          start: {
            line: 125,
            column: 25
          },
          end: {
            line: 125,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 125,
            column: 36
          },
          end: {
            line: 125,
            column: 47
          }
        }, {
          start: {
            line: 125,
            column: 50
          },
          end: {
            line: 125,
            column: 61
          }
        }],
        line: 125
      },
      "27": {
        loc: {
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "28": {
        loc: {
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 139,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 139,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "29": {
        loc: {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "30": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "31": {
        loc: {
          start: {
            line: 158,
            column: 28
          },
          end: {
            line: 158,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 158,
            column: 28
          },
          end: {
            line: 158,
            column: 55
          }
        }, {
          start: {
            line: 158,
            column: 59
          },
          end: {
            line: 158,
            column: 63
          }
        }],
        line: 158
      },
      "32": {
        loc: {
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0],
      "3": [0],
      "4": [0],
      "5": [0],
      "6": [0],
      "7": [0],
      "8": [0],
      "9": [0],
      "10": [0],
      "11": [0],
      "12": [0],
      "13": [0],
      "14": [0],
      "15": [0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b2a537109f7bffcb588e5c596cf0910c6ae5d7e9"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1yx7tpadr3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_1yx7tpadr3();
var ReactSketchCanvas = ( cov_1yx7tpadr3().s[0]++, /*#__PURE__*/React.forwardRef(function (props, ref) {
  cov_1yx7tpadr3().f[0]++;

  var _ref = (cov_1yx7tpadr3().s[1]++, props),
      _ref$id = _ref.id,
      id = _ref$id === void 0 ? (cov_1yx7tpadr3().b[0][0]++, 'react-sketch-canvas') : _ref$id,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? (cov_1yx7tpadr3().b[1][0]++, '100%') : _ref$width,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? (cov_1yx7tpadr3().b[2][0]++, '100%') : _ref$height,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? (cov_1yx7tpadr3().b[3][0]++, '') : _ref$className,
      _ref$canvasColor = _ref.canvasColor,
      canvasColor = _ref$canvasColor === void 0 ? (cov_1yx7tpadr3().b[4][0]++, 'white') : _ref$canvasColor,
      _ref$strokeColor = _ref.strokeColor,
      strokeColor = _ref$strokeColor === void 0 ? (cov_1yx7tpadr3().b[5][0]++, 'red') : _ref$strokeColor,
      _ref$backgroundImage = _ref.backgroundImage,
      backgroundImage = _ref$backgroundImage === void 0 ? (cov_1yx7tpadr3().b[6][0]++, '') : _ref$backgroundImage,
      _ref$exportWithBackgr = _ref.exportWithBackgroundImage,
      exportWithBackgroundImage = _ref$exportWithBackgr === void 0 ? (cov_1yx7tpadr3().b[7][0]++, false) : _ref$exportWithBackgr,
      _ref$preserveBackgrou = _ref.preserveBackgroundImageAspectRatio,
      preserveBackgroundImageAspectRatio = _ref$preserveBackgrou === void 0 ? (cov_1yx7tpadr3().b[8][0]++, 'none') : _ref$preserveBackgrou,
      _ref$strokeWidth = _ref.strokeWidth,
      strokeWidth = _ref$strokeWidth === void 0 ? (cov_1yx7tpadr3().b[9][0]++, 4) : _ref$strokeWidth,
      _ref$eraserWidth = _ref.eraserWidth,
      eraserWidth = _ref$eraserWidth === void 0 ? (cov_1yx7tpadr3().b[10][0]++, 8) : _ref$eraserWidth,
      _ref$allowOnlyPointer = _ref.allowOnlyPointerType,
      allowOnlyPointerType = _ref$allowOnlyPointer === void 0 ? (cov_1yx7tpadr3().b[11][0]++, 'all') : _ref$allowOnlyPointer,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? (cov_1yx7tpadr3().b[12][0]++, {
    border: '0.0625rem solid #9c9c9c',
    borderRadius: '0.25rem'
  }) : _ref$style,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? (cov_1yx7tpadr3().b[13][0]++, function (_paths) {
    cov_1yx7tpadr3().f[1]++;
  }) : _ref$onChange,
      _ref$onStroke = _ref.onStroke,
      onStroke = _ref$onStroke === void 0 ? (cov_1yx7tpadr3().b[14][0]++, function (_path, _isEraser) {
    cov_1yx7tpadr3().f[2]++;
  }) : _ref$onStroke,
      _ref$withTimestamp = _ref.withTimestamp,
      withTimestamp = _ref$withTimestamp === void 0 ? (cov_1yx7tpadr3().b[15][0]++, false) : _ref$withTimestamp;

  var svgCanvas = (cov_1yx7tpadr3().s[2]++, React.createRef());

  var _ref2 = (cov_1yx7tpadr3().s[3]++, React.useState(true)),
      drawMode = _ref2[0],
      setDrawMode = _ref2[1];

  var _ref3 = (cov_1yx7tpadr3().s[4]++, React.useState(false)),
      isDrawing = _ref3[0],
      setIsDrawing = _ref3[1];

  var _ref4 = (cov_1yx7tpadr3().s[5]++, React.useState([])),
      resetStack = _ref4[0],
      setResetStack = _ref4[1];

  var _ref5 = (cov_1yx7tpadr3().s[6]++, React.useState([])),
      undoStack = _ref5[0],
      setUndoStack = _ref5[1];

  var _ref6 = (cov_1yx7tpadr3().s[7]++, React.useState([])),
      currentPaths = _ref6[0],
      setCurrentPaths = _ref6[1];

  var liftStrokeUp = (cov_1yx7tpadr3().s[8]++, React.useCallback(function () {
    var _ref7, _currentPaths$slice;

    cov_1yx7tpadr3().f[3]++;
    var lastStroke = (cov_1yx7tpadr3().s[9]++, (_ref7 = (cov_1yx7tpadr3().b[16][0]++, (_currentPaths$slice = currentPaths.slice(-1)) == null ? void 0 : _currentPaths$slice[0])) != null ? _ref7 : (cov_1yx7tpadr3().b[16][1]++, null));
    cov_1yx7tpadr3().s[10]++;

    if (lastStroke === null) {
      cov_1yx7tpadr3().b[17][0]++;
      cov_1yx7tpadr3().s[11]++;
      console.warn('No stroke found!');
      cov_1yx7tpadr3().s[12]++;
      return;
    } else {
      cov_1yx7tpadr3().b[17][1]++;
    }

    cov_1yx7tpadr3().s[13]++;
    onStroke(lastStroke, !lastStroke.drawMode);
  }, [isDrawing]));
  cov_1yx7tpadr3().s[14]++;
  React.useEffect(function () {
    cov_1yx7tpadr3().f[4]++;
    cov_1yx7tpadr3().s[15]++;
    liftStrokeUp();
  }, [isDrawing]);
  cov_1yx7tpadr3().s[16]++;
  React.useEffect(function () {
    cov_1yx7tpadr3().f[5]++;
    cov_1yx7tpadr3().s[17]++;
    onChange(currentPaths);
  }, [currentPaths]);
  cov_1yx7tpadr3().s[18]++;
  React.useImperativeHandle(ref, function () {
    cov_1yx7tpadr3().f[6]++;
    cov_1yx7tpadr3().s[19]++;
    return {
      eraseMode: function eraseMode(erase) {
        cov_1yx7tpadr3().f[7]++;
        cov_1yx7tpadr3().s[20]++;
        setDrawMode(!erase);
      },
      clearCanvas: function clearCanvas() {
        cov_1yx7tpadr3().f[8]++;
        cov_1yx7tpadr3().s[21]++;
        setResetStack([].concat(currentPaths));
        cov_1yx7tpadr3().s[22]++;
        setCurrentPaths([]);
      },
      undo: function undo() {
        cov_1yx7tpadr3().f[9]++;
        cov_1yx7tpadr3().s[23]++;

        // If there was a last reset then
        if (resetStack.length !== 0) {
          cov_1yx7tpadr3().b[18][0]++;
          cov_1yx7tpadr3().s[24]++;
          setCurrentPaths([].concat(resetStack));
          cov_1yx7tpadr3().s[25]++;
          setResetStack([]);
          cov_1yx7tpadr3().s[26]++;
          return;
        } else {
          cov_1yx7tpadr3().b[18][1]++;
        }

        cov_1yx7tpadr3().s[27]++;
        setUndoStack(function (undoStack) {
          cov_1yx7tpadr3().f[10]++;
          cov_1yx7tpadr3().s[28]++;
          return [].concat(undoStack, currentPaths.slice(-1));
        });
        cov_1yx7tpadr3().s[29]++;
        setCurrentPaths(function (currentPaths) {
          cov_1yx7tpadr3().f[11]++;
          cov_1yx7tpadr3().s[30]++;
          return currentPaths.slice(0, -1);
        });
      },
      redo: function redo() {
        cov_1yx7tpadr3().f[12]++;
        cov_1yx7tpadr3().s[31]++;

        // Nothing to Redo
        if (undoStack.length === 0) {
          cov_1yx7tpadr3().b[19][0]++;
          cov_1yx7tpadr3().s[32]++;
          return;
        } else {
          cov_1yx7tpadr3().b[19][1]++;
        }

        cov_1yx7tpadr3().s[33]++;
        setCurrentPaths(function (currentPaths) {
          cov_1yx7tpadr3().f[13]++;
          cov_1yx7tpadr3().s[34]++;
          return [].concat(currentPaths, undoStack.slice(-1));
        });
        cov_1yx7tpadr3().s[35]++;
        setUndoStack(function (undoStack) {
          cov_1yx7tpadr3().f[14]++;
          cov_1yx7tpadr3().s[36]++;
          return undoStack.slice(0, -1);
        });
      },
      exportImage: function exportImage(imageType) {
        var _svgCanvas$current;

        cov_1yx7tpadr3().f[15]++;
        var exportImage = (cov_1yx7tpadr3().s[37]++, (_svgCanvas$current = svgCanvas.current) == null ? void 0 : _svgCanvas$current.exportImage);
        cov_1yx7tpadr3().s[38]++;

        if (!exportImage) {
          cov_1yx7tpadr3().b[20][0]++;
          cov_1yx7tpadr3().s[39]++;
          throw Error('Export function called before canvas loaded');
        } else {
          cov_1yx7tpadr3().b[20][1]++;
          cov_1yx7tpadr3().s[40]++;
          return exportImage(imageType);
        }
      },
      exportSvg: function exportSvg() {
        cov_1yx7tpadr3().f[16]++;
        cov_1yx7tpadr3().s[41]++;
        return new Promise(function (resolve, reject) {
          var _svgCanvas$current2;

          cov_1yx7tpadr3().f[17]++;
          var exportSvg = (cov_1yx7tpadr3().s[42]++, (_svgCanvas$current2 = svgCanvas.current) == null ? void 0 : _svgCanvas$current2.exportSvg);
          cov_1yx7tpadr3().s[43]++;

          if (!exportSvg) {
            cov_1yx7tpadr3().b[21][0]++;
            cov_1yx7tpadr3().s[44]++;
            reject(Error('Export function called before canvas loaded'));
          } else {
            cov_1yx7tpadr3().b[21][1]++;
            cov_1yx7tpadr3().s[45]++;
            exportSvg().then(function (data) {
              cov_1yx7tpadr3().f[18]++;
              cov_1yx7tpadr3().s[46]++;
              resolve(data);
            })["catch"](function (e) {
              cov_1yx7tpadr3().f[19]++;
              cov_1yx7tpadr3().s[47]++;
              reject(e);
            });
          }
        });
      },
      exportPaths: function exportPaths() {
        cov_1yx7tpadr3().f[20]++;
        cov_1yx7tpadr3().s[48]++;
        return new Promise(function (resolve, reject) {
          cov_1yx7tpadr3().f[21]++;
          cov_1yx7tpadr3().s[49]++;

          try {
            cov_1yx7tpadr3().s[50]++;
            resolve(currentPaths);
          } catch (e) {
            cov_1yx7tpadr3().s[51]++;
            reject(e);
          }
        });
      },
      loadPaths: function loadPaths(paths) {
        cov_1yx7tpadr3().f[22]++;
        cov_1yx7tpadr3().s[52]++;
        setCurrentPaths(function (currentPaths) {
          cov_1yx7tpadr3().f[23]++;
          cov_1yx7tpadr3().s[53]++;
          return [].concat(currentPaths, paths);
        });
      },
      getSketchingTime: function getSketchingTime() {
        cov_1yx7tpadr3().f[24]++;
        cov_1yx7tpadr3().s[54]++;
        return new Promise(function (resolve, reject) {
          cov_1yx7tpadr3().f[25]++;
          cov_1yx7tpadr3().s[55]++;

          if (!withTimestamp) {
            cov_1yx7tpadr3().b[22][0]++;
            cov_1yx7tpadr3().s[56]++;
            reject(new Error("Set 'withTimestamp' prop to get sketching time"));
          } else {
            cov_1yx7tpadr3().b[22][1]++;
          }

          cov_1yx7tpadr3().s[57]++;

          try {
            var sketchingTime = (cov_1yx7tpadr3().s[58]++, currentPaths.reduce(function (totalSketchingTime, path) {
              var _ref8, _ref9;

              cov_1yx7tpadr3().f[26]++;
              var startTimestamp = (cov_1yx7tpadr3().s[59]++, (_ref8 = (cov_1yx7tpadr3().b[23][0]++, path.startTimestamp)) != null ? _ref8 : (cov_1yx7tpadr3().b[23][1]++, 0));
              var endTimestamp = (cov_1yx7tpadr3().s[60]++, (_ref9 = (cov_1yx7tpadr3().b[24][0]++, path.endTimestamp)) != null ? _ref9 : (cov_1yx7tpadr3().b[24][1]++, 0));
              cov_1yx7tpadr3().s[61]++;
              return totalSketchingTime + (endTimestamp - startTimestamp);
            }, 0));
            cov_1yx7tpadr3().s[62]++;
            resolve(sketchingTime);
          } catch (e) {
            cov_1yx7tpadr3().s[63]++;
            reject(e);
          }
        });
      },
      resetCanvas: function resetCanvas() {
        cov_1yx7tpadr3().f[27]++;
        cov_1yx7tpadr3().s[64]++;
        setResetStack([]);
        cov_1yx7tpadr3().s[65]++;
        setUndoStack([]);
        cov_1yx7tpadr3().s[66]++;
        setCurrentPaths([]);
      }
    };
  });
  cov_1yx7tpadr3().s[67]++;

  var handlePointerDown = function handlePointerDown(point) {
    cov_1yx7tpadr3().f[28]++;
    cov_1yx7tpadr3().s[68]++;
    setIsDrawing(true);
    cov_1yx7tpadr3().s[69]++;
    setUndoStack([]);
    var stroke = (cov_1yx7tpadr3().s[70]++, {
      drawMode: drawMode,
      strokeColor: drawMode ? (cov_1yx7tpadr3().b[25][0]++, strokeColor) : (cov_1yx7tpadr3().b[25][1]++, '#000000'),
      strokeWidth: drawMode ? (cov_1yx7tpadr3().b[26][0]++, strokeWidth) : (cov_1yx7tpadr3().b[26][1]++, eraserWidth),
      paths: [point]
    });
    cov_1yx7tpadr3().s[71]++;

    if (withTimestamp) {
      cov_1yx7tpadr3().b[27][0]++;
      cov_1yx7tpadr3().s[72]++;
      stroke = _extends({}, stroke, {
        startTimestamp: Date.now(),
        endTimestamp: 0
      });
    } else {
      cov_1yx7tpadr3().b[27][1]++;
    }

    cov_1yx7tpadr3().s[73]++;
    setCurrentPaths(function (currentPaths) {
      cov_1yx7tpadr3().f[29]++;
      cov_1yx7tpadr3().s[74]++;
      return [].concat(currentPaths, [stroke]);
    });
  };

  cov_1yx7tpadr3().s[75]++;

  var handlePointerMove = function handlePointerMove(point) {
    cov_1yx7tpadr3().f[30]++;
    cov_1yx7tpadr3().s[76]++;

    if (!isDrawing) {
      cov_1yx7tpadr3().b[28][0]++;
      cov_1yx7tpadr3().s[77]++;
      return;
    } else {
      cov_1yx7tpadr3().b[28][1]++;
    }

    var currentStroke = (cov_1yx7tpadr3().s[78]++, currentPaths.slice(-1)[0]);
    var updatedStroke = (cov_1yx7tpadr3().s[79]++, _extends({}, currentStroke, {
      paths: [].concat(currentStroke.paths, [point])
    }));
    cov_1yx7tpadr3().s[80]++;
    setCurrentPaths(function (currentPaths) {
      cov_1yx7tpadr3().f[31]++;
      cov_1yx7tpadr3().s[81]++;
      return [].concat(currentPaths.slice(0, -1), [updatedStroke]);
    });
  };

  cov_1yx7tpadr3().s[82]++;

  var handlePointerUp = function handlePointerUp() {
    var _ref10, _currentPaths$slice2;

    cov_1yx7tpadr3().f[32]++;
    cov_1yx7tpadr3().s[83]++;

    if (!isDrawing) {
      cov_1yx7tpadr3().b[29][0]++;
      cov_1yx7tpadr3().s[84]++;
      return;
    } else {
      cov_1yx7tpadr3().b[29][1]++;
    }

    cov_1yx7tpadr3().s[85]++;
    setIsDrawing(false);
    cov_1yx7tpadr3().s[86]++;

    if (!withTimestamp) {
      cov_1yx7tpadr3().b[30][0]++;
      cov_1yx7tpadr3().s[87]++;
      return;
    } else {
      cov_1yx7tpadr3().b[30][1]++;
    }

    var currentStroke = (cov_1yx7tpadr3().s[88]++, (_ref10 = (cov_1yx7tpadr3().b[31][0]++, (_currentPaths$slice2 = currentPaths.slice(-1)) == null ? void 0 : _currentPaths$slice2[0])) != null ? _ref10 : (cov_1yx7tpadr3().b[31][1]++, null));
    cov_1yx7tpadr3().s[89]++;

    if (currentStroke === null) {
      cov_1yx7tpadr3().b[32][0]++;
      cov_1yx7tpadr3().s[90]++;
      return;
    } else {
      cov_1yx7tpadr3().b[32][1]++;
    }

    var updatedStroke = (cov_1yx7tpadr3().s[91]++, _extends({}, currentStroke, {
      endTimestamp: Date.now()
    }));
    cov_1yx7tpadr3().s[92]++;
    setCurrentPaths(function (currentPaths) {
      cov_1yx7tpadr3().f[33]++;
      cov_1yx7tpadr3().s[93]++;
      return [].concat(currentPaths.slice(0, -1), [updatedStroke]);
    });
  };

  cov_1yx7tpadr3().s[94]++;
  return React.createElement(Canvas, {
    ref: svgCanvas,
    id: id,
    width: width,
    height: height,
    className: className,
    canvasColor: canvasColor,
    backgroundImage: backgroundImage,
    exportWithBackgroundImage: exportWithBackgroundImage,
    preserveBackgroundImageAspectRatio: preserveBackgroundImageAspectRatio,
    allowOnlyPointerType: allowOnlyPointerType,
    style: style,
    paths: currentPaths,
    isDrawing: isDrawing,
    onPointerDown: handlePointerDown,
    onPointerMove: handlePointerMove,
    onPointerUp: handlePointerUp
  });
}));

function cov_gp4mxvf8v() {
  var path = "/home/vinoth/projects/react-sketch-canvas/src/types/canvas.ts";
  var hash = "2be87fac19128abc01bbef968f5632f44d7b92aa";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/vinoth/projects/react-sketch-canvas/src/types/canvas.ts",
    statementMap: {},
    fnMap: {},
    branchMap: {},
    s: {},
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2be87fac19128abc01bbef968f5632f44d7b92aa"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_gp4mxvf8v = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_gp4mxvf8v();

function cov_o19yvvbx() {
  var path = "/home/vinoth/projects/react-sketch-canvas/src/types/index.ts";
  var hash = "f901f2ab2015710050609381f310eb527969a502";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/vinoth/projects/react-sketch-canvas/src/types/index.ts",
    statementMap: {},
    fnMap: {},
    branchMap: {},
    s: {},
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f901f2ab2015710050609381f310eb527969a502"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_o19yvvbx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_o19yvvbx();

function cov_1vjjcck374() {
  var path = "/home/vinoth/projects/react-sketch-canvas/src/index.tsx";
  var hash = "8a41ff681dd72447491d9a16cbdba8afde945045";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/vinoth/projects/react-sketch-canvas/src/index.tsx",
    statementMap: {},
    fnMap: {},
    branchMap: {},
    s: {},
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8a41ff681dd72447491d9a16cbdba8afde945045"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1vjjcck374 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_1vjjcck374();

export { Canvas, ReactSketchCanvas };
//# sourceMappingURL=react-sketch-canvas.esm.js.map

{"ast":null,"code":"\"use strict\";\n\nvar isPlainObj = require(\"./isPlainObj\");\n\nvar isArray = require(\"../array/isArray\");\n\nfunction mixin(source, target) {\n  var copy = function (source, obj) {\n    var src, target, copyIsArray, clone;\n\n    for (var key in obj) {\n      src = source[key];\n      target = obj[key];\n      if (src == target) continue;\n\n      if (target && (isPlainObj(target) || (copyIsArray = isArray(target)))) {\n        if (copyIsArray) {\n          copyIsArray = false;\n          clone = src && isArray(src) ? src : [];\n        } else {\n          clone = src && isPlainObj(src) ? src : {};\n        }\n\n        source[key] = copy(clone, target);\n      } else if (target !== undefined) {\n        source[key] = target;\n      }\n    }\n\n    return source;\n  };\n\n  var targets = [].slice.call(arguments, 1);\n  targets.forEach(function (target) {\n    source = copy(source, target);\n  });\n  return source;\n}\n\nmodule.exports = mixin;","map":{"version":3,"sources":["/Users/yveshuber/Documents/Dokumente/020_BBW/ABK/001_Mathe/dreiecksrechner/node_modules/zz-utils/src/object/mixin.js"],"names":["isPlainObj","require","isArray","mixin","source","target","copy","obj","src","copyIsArray","clone","key","undefined","targets","slice","call","arguments","forEach","module","exports"],"mappings":"AAAA;;AACA,IAAIA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,kBAAD,CAArB;;AAEA,SAASE,KAAT,CAAeC,MAAf,EAAuBC,MAAvB,EAA+B;AAC3B,MAAIC,IAAI,GAAG,UAAUF,MAAV,EAAkBG,GAAlB,EAAuB;AAC9B,QAAIC,GAAJ,EAASH,MAAT,EAAiBI,WAAjB,EAA8BC,KAA9B;;AACA,SAAK,IAAIC,GAAT,IAAgBJ,GAAhB,EAAqB;AACjBC,MAAAA,GAAG,GAAGJ,MAAM,CAACO,GAAD,CAAZ;AACAN,MAAAA,MAAM,GAAGE,GAAG,CAACI,GAAD,CAAZ;AAEA,UAAIH,GAAG,IAAIH,MAAX,EAAmB;;AAEnB,UAAIA,MAAM,KAAKL,UAAU,CAACK,MAAD,CAAV,KAAuBI,WAAW,GAAGP,OAAO,CAACG,MAAD,CAA5C,CAAL,CAAV,EAAuE;AACnE,YAAII,WAAJ,EAAiB;AACbA,UAAAA,WAAW,GAAG,KAAd;AACAC,UAAAA,KAAK,GAAGF,GAAG,IAAIN,OAAO,CAACM,GAAD,CAAd,GAAsBA,GAAtB,GAA4B,EAApC;AACH,SAHD,MAGO;AACHE,UAAAA,KAAK,GAAGF,GAAG,IAAIR,UAAU,CAACQ,GAAD,CAAjB,GAAyBA,GAAzB,GAA+B,EAAvC;AACH;;AAEDJ,QAAAA,MAAM,CAACO,GAAD,CAAN,GAAcL,IAAI,CAACI,KAAD,EAAQL,MAAR,CAAlB;AACH,OATD,MASO,IAAIA,MAAM,KAAKO,SAAf,EAA0B;AAC7BR,QAAAA,MAAM,CAACO,GAAD,CAAN,GAAcN,MAAd;AACH;AACJ;;AACD,WAAOD,MAAP;AACH,GAtBD;;AAwBA,MAAIS,OAAO,GAAG,GAAGC,KAAH,CAASC,IAAT,CAAcC,SAAd,EAAyB,CAAzB,CAAd;AAEAH,EAAAA,OAAO,CAACI,OAAR,CAAgB,UAAUZ,MAAV,EAAkB;AAC9BD,IAAAA,MAAM,GAAGE,IAAI,CAACF,MAAD,EAASC,MAAT,CAAb;AACH,GAFD;AAIA,SAAOD,MAAP;AACH;;AAEDc,MAAM,CAACC,OAAP,GAAiBhB,KAAjB","sourcesContent":["\"use strict\";\nvar isPlainObj = require(\"./isPlainObj\");\nvar isArray = require(\"../array/isArray\");\n\nfunction mixin(source, target) {\n    var copy = function (source, obj) {\n        var src, target, copyIsArray, clone;\n        for (var key in obj) {\n            src = source[key];\n            target = obj[key];\n\n            if (src == target) continue;\n\n            if (target && (isPlainObj(target) || (copyIsArray = isArray(target)))) {\n                if (copyIsArray) {\n                    copyIsArray = false;\n                    clone = src && isArray(src) ? src : [];\n                } else {\n                    clone = src && isPlainObj(src) ? src : {};\n                }\n\n                source[key] = copy(clone, target);\n            } else if (target !== undefined) {\n                source[key] = target;\n            }\n        }\n        return source;\n    };\n\n    var targets = [].slice.call(arguments, 1);\n\n    targets.forEach(function (target) {\n        source = copy(source, target);\n    });\n\n    return source;\n}\n\nmodule.exports = mixin;"]},"metadata":{},"sourceType":"script"}
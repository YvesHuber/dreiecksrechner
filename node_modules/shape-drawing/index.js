"use strict";
var Shape = require("./src/shape");

var _canvas = document.createElement("canvas");
var _ctx = _canvas.getContext("2d");
var cache = {};

/**
 * create a Shape object
 * 
 * @param {CanvasRenderingContext2D} ctx canvas rendering content
 * @param {Object} options ctx config options
 * @param {Number} options.lineWidth ctx line width
 * @param {DOMString | CanvasGradient | CanvasPattern} options.fillStyle ctx fill style
 * @param {DOMString | CanvasGradient | CanvasPattern} options.strokeStyle ctx stroke style
 * @param {DOMString} options.font ctx font
 * @returns {Shape}
 */
function createShape(ctx, options) {
    var shape = new Shape(ctx, options);
    return shape;
}

function SD(obj, options) {
    var id;
    if (_ctx.__proto__.isPrototypeOf(obj)) {
        id = obj.canvas.id;
        if (!!cache[id]) {
            return cache[id];
        } else {
            var shape = createShape(obj, options);
            cache[id] = shape;
            return shape;
        }
    } else if (typeof obj === "string") {
        id = obj;
        if (!!cache[id]) {
            return cache[id];
        } else {
            var canvas = document.getElementById(id);
            if (!canvas) throw new ReferenceError("canvas not found!");

            var ctx = canvas.getContext("2d");
            var shape = createShape(ctx, options);
            cache[id] = shape;
            return shape;
        }
    } else {
        throw TypeError("obj should be type of CanvasRenderingContext2D or String");
    }
}

SD.createShape = createShape;
SD.Shape = Shape;
SD.extend = Shape.fn.extend;
SD.cache = cache;
SD.clearCache = function () {
    var keys = Object.keys(cache);
    keys.forEach(function (key) {
        delete cache[key];
    });
}

module.exports = SD;
